
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `synth.ys' --

1. Executing Verilog-2005 frontend: bsw_acc.v
Parsing Verilog input from `bsw_acc.v' to AST representation.
Generating RTLIL representation for module `\bsw_acc'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: pe_top.v
Parsing Verilog input from `pe_top.v' to AST representation.
Generating RTLIL representation for module `\pe_top'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: pe_unit.v
Parsing Verilog input from `pe_unit.v' to AST representation.
Generating RTLIL representation for module `\pe_unit'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: shift_reg.v
Parsing Verilog input from `shift_reg.v' to AST representation.
Generating RTLIL representation for module `\shift_reg'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: traceback.v
Parsing Verilog input from `traceback.v' to AST representation.
Generating RTLIL representation for module `\traceback'.
Successfully finished Verilog frontend.

6. Executing SYNTH_XILINX pass.

6.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\IBUF'.
Generating RTLIL representation for module `\OBUF'.
Generating RTLIL representation for module `\BUFG'.
Generating RTLIL representation for module `\BUFGCTRL'.
Generating RTLIL representation for module `\BUFHCE'.
Generating RTLIL representation for module `\INV'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\LUT5'.
Generating RTLIL representation for module `\LUT6'.
Generating RTLIL representation for module `\LUT6_2'.
Generating RTLIL representation for module `\MUXCY'.
Generating RTLIL representation for module `\MUXF7'.
Generating RTLIL representation for module `\MUXF8'.
Generating RTLIL representation for module `\XORCY'.
Generating RTLIL representation for module `\CARRY4'.
Generating RTLIL representation for module `\FDRE'.
Generating RTLIL representation for module `\FDSE'.
Generating RTLIL representation for module `\FDCE'.
Generating RTLIL representation for module `\FDPE'.
Generating RTLIL representation for module `\FDRE_1'.
Generating RTLIL representation for module `\FDSE_1'.
Generating RTLIL representation for module `\FDCE_1'.
Generating RTLIL representation for module `\FDPE_1'.
Generating RTLIL representation for module `\RAM32X1D'.
Generating RTLIL representation for module `\RAM64X1D'.
Generating RTLIL representation for module `\RAM128X1D'.
Generating RTLIL representation for module `\SRL16E'.
Generating RTLIL representation for module `\SRLC32E'.
Successfully finished Verilog frontend.

6.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/cells_xtra.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/cells_xtra.v' to AST representation.
Generating RTLIL representation for module `\BSCANE2'.
Generating RTLIL representation for module `\BUFGCE'.
Generating RTLIL representation for module `\BUFGCE_1'.
Generating RTLIL representation for module `\BUFGMUX'.
Generating RTLIL representation for module `\BUFGMUX_1'.
Generating RTLIL representation for module `\BUFGMUX_CTRL'.
Generating RTLIL representation for module `\BUFH'.
Generating RTLIL representation for module `\BUFIO'.
Generating RTLIL representation for module `\BUFMR'.
Generating RTLIL representation for module `\BUFMRCE'.
Generating RTLIL representation for module `\BUFR'.
Generating RTLIL representation for module `\CAPTUREE2'.
Generating RTLIL representation for module `\CFGLUT5'.
Generating RTLIL representation for module `\DCIRESET'.
Generating RTLIL representation for module `\DNA_PORT'.
Generating RTLIL representation for module `\DSP48E1'.
Generating RTLIL representation for module `\EFUSE_USR'.
Generating RTLIL representation for module `\FIFO18E1'.
Generating RTLIL representation for module `\FIFO36E1'.
Generating RTLIL representation for module `\FRAME_ECCE2'.
Generating RTLIL representation for module `\GTHE2_CHANNEL'.
Generating RTLIL representation for module `\GTHE2_COMMON'.
Generating RTLIL representation for module `\GTPE2_CHANNEL'.
Generating RTLIL representation for module `\GTPE2_COMMON'.
Generating RTLIL representation for module `\GTXE2_CHANNEL'.
Generating RTLIL representation for module `\GTXE2_COMMON'.
Generating RTLIL representation for module `\IBUF_IBUFDISABLE'.
Generating RTLIL representation for module `\IBUF_INTERMDISABLE'.
Generating RTLIL representation for module `\IBUFDS'.
Generating RTLIL representation for module `\IBUFDS_DIFF_OUT'.
Generating RTLIL representation for module `\IBUFDS_DIFF_OUT_IBUFDISABLE'.
Generating RTLIL representation for module `\IBUFDS_DIFF_OUT_INTERMDISABLE'.
Generating RTLIL representation for module `\IBUFDS_GTE2'.
Generating RTLIL representation for module `\IBUFDS_IBUFDISABLE'.
Generating RTLIL representation for module `\IBUFDS_INTERMDISABLE'.
Generating RTLIL representation for module `\ICAPE2'.
Generating RTLIL representation for module `\IDDR'.
Generating RTLIL representation for module `\IDDR_2CLK'.
Generating RTLIL representation for module `\IDELAYCTRL'.
Generating RTLIL representation for module `\IDELAYE2'.
Generating RTLIL representation for module `\IN_FIFO'.
Generating RTLIL representation for module `\IOBUF'.
Generating RTLIL representation for module `\IOBUF_DCIEN'.
Generating RTLIL representation for module `\IOBUF_INTERMDISABLE'.
Generating RTLIL representation for module `\IOBUFDS'.
Generating RTLIL representation for module `\IOBUFDS_DCIEN'.
Generating RTLIL representation for module `\IOBUFDS_DIFF_OUT'.
Generating RTLIL representation for module `\IOBUFDS_DIFF_OUT_DCIEN'.
Generating RTLIL representation for module `\IOBUFDS_DIFF_OUT_INTERMDISABLE'.
Generating RTLIL representation for module `\ISERDESE2'.
Generating RTLIL representation for module `\KEEPER'.
Generating RTLIL representation for module `\LDCE'.
Generating RTLIL representation for module `\LDPE'.
Generating RTLIL representation for module `\MMCME2_ADV'.
Generating RTLIL representation for module `\MMCME2_BASE'.
Generating RTLIL representation for module `\OBUFDS'.
Generating RTLIL representation for module `\OBUFT'.
Generating RTLIL representation for module `\OBUFTDS'.
Generating RTLIL representation for module `\ODDR'.
Generating RTLIL representation for module `\ODELAYE2'.
Generating RTLIL representation for module `\OSERDESE2'.
Generating RTLIL representation for module `\OUT_FIFO'.
Generating RTLIL representation for module `\PHASER_IN'.
Generating RTLIL representation for module `\PHASER_IN_PHY'.
Generating RTLIL representation for module `\PHASER_OUT'.
Generating RTLIL representation for module `\PHASER_OUT_PHY'.
Generating RTLIL representation for module `\PHASER_REF'.
Generating RTLIL representation for module `\PHY_CONTROL'.
Generating RTLIL representation for module `\PLLE2_ADV'.
Generating RTLIL representation for module `\PLLE2_BASE'.
Generating RTLIL representation for module `\PS7'.
Generating RTLIL representation for module `\PULLDOWN'.
Generating RTLIL representation for module `\PULLUP'.
Generating RTLIL representation for module `\RAM128X1S'.
Generating RTLIL representation for module `\RAM256X1S'.
Generating RTLIL representation for module `\RAM32M'.
Generating RTLIL representation for module `\RAM32X1S'.
Generating RTLIL representation for module `\RAM32X1S_1'.
Generating RTLIL representation for module `\RAM32X2S'.
Generating RTLIL representation for module `\RAM64M'.
Replacing existing blackbox module `\RAM64X1D' at /usr/bin/../share/yosys/xilinx/cells_xtra.v:3741.
Generating RTLIL representation for module `\RAM64X1D'.
Generating RTLIL representation for module `\RAM64X1S'.
Generating RTLIL representation for module `\RAM64X1S_1'.
Generating RTLIL representation for module `\RAM64X2S'.
Generating RTLIL representation for module `\ROM128X1'.
Generating RTLIL representation for module `\ROM256X1'.
Generating RTLIL representation for module `\ROM32X1'.
Generating RTLIL representation for module `\ROM64X1'.
Generating RTLIL representation for module `\STARTUPE2'.
Generating RTLIL representation for module `\USR_ACCESSE2'.
Generating RTLIL representation for module `\XADC'.
Successfully finished Verilog frontend.

6.3. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/brams_bb.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/brams_bb.v' to AST representation.
Generating RTLIL representation for module `\RAMB18E1'.
Generating RTLIL representation for module `\RAMB36E1'.
Successfully finished Verilog frontend.

6.4. Executing HIERARCHY pass (managing design hierarchy).

6.4.1. Analyzing design hierarchy..
Top module:  \bsw_acc
Used module:     \traceback
Used module:     \pe_top
Used module:         \pe_unit
Used module:     \shift_reg

6.4.2. Analyzing design hierarchy..
Top module:  \bsw_acc
Used module:     \traceback
Used module:     \pe_top
Used module:         \pe_unit
Used module:     \shift_reg
Removed 0 unused modules.

6.5. Executing SYNTH pass.

6.5.1. Executing PROC pass (convert processes to netlists).

6.5.1.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.5.1.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$traceback.v:33$126 in module traceback.
Marked 2 switch rules as full_case in process $proc$shift_reg.v:30$118 in module shift_reg.
Marked 1 switch rules as full_case in process $proc$pe_unit.v:63$114 in module pe_unit.
Marked 3 switch rules as full_case in process $proc$pe_unit.v:42$104 in module pe_unit.
Marked 2 switch rules as full_case in process $proc$pe_top.v:94$97 in module pe_top.
Marked 4 switch rules as full_case in process $proc$pe_top.v:72$87 in module pe_top.
Marked 2 switch rules as full_case in process $proc$bsw_acc.v:243$58 in module bsw_acc.
Marked 1 switch rules as full_case in process $proc$bsw_acc.v:233$57 in module bsw_acc.
Removed 1 dead cases from process $proc$bsw_acc.v:221$51 in module bsw_acc.
Marked 1 switch rules as full_case in process $proc$bsw_acc.v:221$51 in module bsw_acc.
Marked 6 switch rules as full_case in process $proc$bsw_acc.v:110$7 in module bsw_acc.
Removed a total of 1 dead cases.

6.5.1.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\shift_reg.$proc$shift_reg.v:26$119'.
  Set init value: \out = 12'000000000000
Found init rule in `\bsw_acc.$proc$bsw_acc.v:99$78'.
  Set init value: \count1 = 8'00000000
  Set init value: \count2 = 5'00000
  Set init value: \count3 = 5'00000

6.5.1.4. Executing PROC_ARST pass (detect async resets in processes).

6.5.1.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\traceback.$proc$traceback.v:33$126'.
     1/8: $0\r_ctr[2:0]
     2/8: $0\q_ctr[2:0]
     3/8: $0\activated[0:0]
     4/8: $0\out_q[2:0]
     5/8: $0\out_r[2:0]
     6/8: $0\addr[7:0]
     7/8: $0\pe_id[1:0]
     8/8: $0\finish[0:0]
Creating decoders for process `\shift_reg.$proc$shift_reg.v:26$119'.
     1/1: $1\out[11:0]
Creating decoders for process `\shift_reg.$proc$shift_reg.v:30$118'.
     1/1: $0\out[11:0]
Creating decoders for process `\pe_unit.$proc$pe_unit.v:63$114'.
     1/2: $0\out_prev[7:0]
     2/2: $0\out_current[7:0]
Creating decoders for process `\pe_unit.$proc$pe_unit.v:42$104'.
     1/8: $3\out_re_pos[2:0]
     2/8: $3\max[7:0]
     3/8: $2\out_re_pos[2:0]
     4/8: $2\max[7:0]
     5/8: $1\out_re_pos[2:0]
     6/8: $1\max[7:0]
     7/8: $0\max[7:0]
     8/8: $0\out_re_pos[2:0]
Creating decoders for process `\pe_top.$proc$pe_top.v:94$97'.
     1/45: $2\pos3[2:0]
     2/45: $2\pos2[2:0]
     3/45: $2\pos1[2:0]
     4/45: $2\pe4_in3[7:0]
     5/45: $2\pe4_in2[7:0]
     6/45: $2\pe4_in1[7:0]
     7/45: $2\pe3_in3[7:0]
     8/45: $2\pe3_in2[7:0]
     9/45: $2\pe3_in1[7:0]
    10/45: $2\pe2_in3[7:0]
    11/45: $2\pe2_in2[7:0]
    12/45: $2\pe2_in1[7:0]
    13/45: $2\pe1_in3[7:0]
    14/45: $2\pe1_in2[7:0]
    15/45: $2\pe1_in1[7:0]
    16/45: $1\pos3[2:0]
    17/45: $1\pos2[2:0]
    18/45: $1\pos1[2:0]
    19/45: $1\pe4_in3[7:0]
    20/45: $1\pe4_in2[7:0]
    21/45: $1\pe4_in1[7:0]
    22/45: $1\pe3_in3[7:0]
    23/45: $1\pe3_in2[7:0]
    24/45: $1\pe3_in1[7:0]
    25/45: $1\pe2_in3[7:0]
    26/45: $1\pe2_in2[7:0]
    27/45: $1\pe2_in1[7:0]
    28/45: $1\pe1_in3[7:0]
    29/45: $1\pe1_in2[7:0]
    30/45: $1\pe1_in1[7:0]
    31/45: $0\pos3[2:0]
    32/45: $0\pos2[2:0]
    33/45: $0\pos1[2:0]
    34/45: $0\pe4_in3[7:0]
    35/45: $0\pe4_in2[7:0]
    36/45: $0\pe4_in1[7:0]
    37/45: $0\pe3_in3[7:0]
    38/45: $0\pe3_in2[7:0]
    39/45: $0\pe3_in1[7:0]
    40/45: $0\pe2_in3[7:0]
    41/45: $0\pe2_in2[7:0]
    42/45: $0\pe2_in1[7:0]
    43/45: $0\pe1_in3[7:0]
    44/45: $0\pe1_in2[7:0]
    45/45: $0\pe1_in1[7:0]
Creating decoders for process `\pe_top.$proc$pe_top.v:72$87'.
     1/9: $4\D[1:0]
     2/9: $3\region[1:0]
     3/9: $3\D[1:0]
     4/9: $2\D[1:0]
     5/9: $2\region[1:0]
     6/9: $1\D[1:0]
     7/9: $1\region[1:0]
     8/9: $0\region[1:0]
     9/9: $0\D[1:0]
Creating decoders for process `\bsw_acc.$proc$bsw_acc.v:99$78'.
     1/3: $1\count3[4:0]
     2/3: $1\count2[4:0]
     3/3: $1\count1[7:0]
Creating decoders for process `\bsw_acc.$proc$bsw_acc.v:243$58'.
     1/61: $0\Q_aligned[29:0] [29]
     2/61: $0\Q_aligned[29:0] [28]
     3/61: $0\Q_aligned[29:0] [27]
     4/61: $0\Q_aligned[29:0] [26]
     5/61: $0\Q_aligned[29:0] [25]
     6/61: $0\Q_aligned[29:0] [24]
     7/61: $0\Q_aligned[29:0] [23]
     8/61: $0\Q_aligned[29:0] [22]
     9/61: $0\Q_aligned[29:0] [21]
    10/61: $0\Q_aligned[29:0] [20]
    11/61: $0\Q_aligned[29:0] [19]
    12/61: $0\Q_aligned[29:0] [18]
    13/61: $0\Q_aligned[29:0] [17]
    14/61: $0\Q_aligned[29:0] [16]
    15/61: $0\Q_aligned[29:0] [15]
    16/61: $0\Q_aligned[29:0] [14]
    17/61: $0\Q_aligned[29:0] [13]
    18/61: $0\Q_aligned[29:0] [12]
    19/61: $0\Q_aligned[29:0] [11]
    20/61: $0\Q_aligned[29:0] [10]
    21/61: $0\Q_aligned[29:0] [9]
    22/61: $0\Q_aligned[29:0] [8]
    23/61: $0\Q_aligned[29:0] [7]
    24/61: $0\Q_aligned[29:0] [6]
    25/61: $0\Q_aligned[29:0] [5]
    26/61: $0\Q_aligned[29:0] [4]
    27/61: $0\Q_aligned[29:0] [3]
    28/61: $0\Q_aligned[29:0] [2]
    29/61: $0\Q_aligned[29:0] [1]
    30/61: $0\Q_aligned[29:0] [0]
    31/61: $0\R_aligned[29:0] [28]
    32/61: $0\R_aligned[29:0] [27]
    33/61: $0\R_aligned[29:0] [26]
    34/61: $0\R_aligned[29:0] [25]
    35/61: $0\R_aligned[29:0] [24]
    36/61: $0\R_aligned[29:0] [23]
    37/61: $0\R_aligned[29:0] [22]
    38/61: $0\R_aligned[29:0] [21]
    39/61: $0\R_aligned[29:0] [20]
    40/61: $0\R_aligned[29:0] [19]
    41/61: $0\R_aligned[29:0] [18]
    42/61: $0\R_aligned[29:0] [17]
    43/61: $0\R_aligned[29:0] [16]
    44/61: $0\R_aligned[29:0] [15]
    45/61: $0\R_aligned[29:0] [14]
    46/61: $0\R_aligned[29:0] [13]
    47/61: $0\R_aligned[29:0] [12]
    48/61: $0\R_aligned[29:0] [11]
    49/61: $0\R_aligned[29:0] [10]
    50/61: $0\R_aligned[29:0] [9]
    51/61: $0\R_aligned[29:0] [8]
    52/61: $0\R_aligned[29:0] [7]
    53/61: $0\R_aligned[29:0] [6]
    54/61: $0\R_aligned[29:0] [5]
    55/61: $0\R_aligned[29:0] [4]
    56/61: $0\R_aligned[29:0] [3]
    57/61: $0\R_aligned[29:0] [2]
    58/61: $0\R_aligned[29:0] [1]
    59/61: $0\R_aligned[29:0] [0]
    60/61: $0\ctr[7:0]
    61/61: $0\R_aligned[29:0] [29]
Creating decoders for process `\bsw_acc.$proc$bsw_acc.v:233$57'.
     1/1: $0\stop_traceback[0:0]
Creating decoders for process `\bsw_acc.$proc$bsw_acc.v:221$51'.
     1/2: $1\req_rel_pos[7:0]
     2/2: $0\req_rel_pos[7:0]
Creating decoders for process `\bsw_acc.$proc$bsw_acc.v:202$22'.
     1/12: $0$memwr$\pe1_mem$bsw_acc.v:205$1_EN[7:0]$25
     2/12: $0$memwr$\pe1_mem$bsw_acc.v:205$1_DATA[7:0]$24
     3/12: $0$memwr$\pe1_mem$bsw_acc.v:205$1_ADDR[31:0]$23
     4/12: $0$memwr$\pe2_mem$bsw_acc.v:208$2_EN[7:0]$28
     5/12: $0$memwr$\pe2_mem$bsw_acc.v:208$2_DATA[7:0]$27
     6/12: $0$memwr$\pe2_mem$bsw_acc.v:208$2_ADDR[31:0]$26
     7/12: $0$memwr$\pe3_mem$bsw_acc.v:211$3_EN[7:0]$31
     8/12: $0$memwr$\pe3_mem$bsw_acc.v:211$3_DATA[7:0]$30
     9/12: $0$memwr$\pe3_mem$bsw_acc.v:211$3_ADDR[31:0]$29
    10/12: $0$memwr$\pe4_mem$bsw_acc.v:214$4_EN[7:0]$34
    11/12: $0$memwr$\pe4_mem$bsw_acc.v:214$4_DATA[7:0]$33
    12/12: $0$memwr$\pe4_mem$bsw_acc.v:214$4_ADDR[31:0]$32
Creating decoders for process `\bsw_acc.$proc$bsw_acc.v:110$7'.
     1/9: $0\start_traceback[0:0]
     2/9: $0\count3[4:0]
     3/9: $0\count2[4:0]
     4/9: $0\count1[7:0]
     5/9: $0\pe_valid[0:0]
     6/9: $0\en_q[0:0]
     7/9: $0\en_r[0:0]
     8/9: $0\in_q[2:0]
     9/9: $0\in_r[2:0]

6.5.1.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\pe_unit.\out_re_pos' from process `\pe_unit.$proc$pe_unit.v:42$104'.
No latch inferred for signal `\pe_unit.\max' from process `\pe_unit.$proc$pe_unit.v:42$104'.
No latch inferred for signal `\pe_top.\pe1_in1' from process `\pe_top.$proc$pe_top.v:94$97'.
No latch inferred for signal `\pe_top.\pe1_in2' from process `\pe_top.$proc$pe_top.v:94$97'.
No latch inferred for signal `\pe_top.\pe1_in3' from process `\pe_top.$proc$pe_top.v:94$97'.
No latch inferred for signal `\pe_top.\pe2_in1' from process `\pe_top.$proc$pe_top.v:94$97'.
No latch inferred for signal `\pe_top.\pe2_in2' from process `\pe_top.$proc$pe_top.v:94$97'.
No latch inferred for signal `\pe_top.\pe2_in3' from process `\pe_top.$proc$pe_top.v:94$97'.
No latch inferred for signal `\pe_top.\pe3_in1' from process `\pe_top.$proc$pe_top.v:94$97'.
No latch inferred for signal `\pe_top.\pe3_in2' from process `\pe_top.$proc$pe_top.v:94$97'.
No latch inferred for signal `\pe_top.\pe3_in3' from process `\pe_top.$proc$pe_top.v:94$97'.
No latch inferred for signal `\pe_top.\pe4_in1' from process `\pe_top.$proc$pe_top.v:94$97'.
No latch inferred for signal `\pe_top.\pe4_in2' from process `\pe_top.$proc$pe_top.v:94$97'.
No latch inferred for signal `\pe_top.\pe4_in3' from process `\pe_top.$proc$pe_top.v:94$97'.
No latch inferred for signal `\pe_top.\pos1' from process `\pe_top.$proc$pe_top.v:94$97'.
No latch inferred for signal `\pe_top.\pos2' from process `\pe_top.$proc$pe_top.v:94$97'.
No latch inferred for signal `\pe_top.\pos3' from process `\pe_top.$proc$pe_top.v:94$97'.
No latch inferred for signal `\pe_top.\D' from process `\pe_top.$proc$pe_top.v:72$87'.
No latch inferred for signal `\pe_top.\region' from process `\pe_top.$proc$pe_top.v:72$87'.
No latch inferred for signal `\bsw_acc.\req_rel_pos' from process `\bsw_acc.$proc$bsw_acc.v:221$51'.

6.5.1.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\traceback.\finish' using process `\traceback.$proc$traceback.v:33$126'.
  created $dff cell `$procdff$3909' with positive edge clock.
Creating register for signal `\traceback.\pe_id' using process `\traceback.$proc$traceback.v:33$126'.
  created $dff cell `$procdff$3910' with positive edge clock.
Creating register for signal `\traceback.\addr' using process `\traceback.$proc$traceback.v:33$126'.
  created $dff cell `$procdff$3911' with positive edge clock.
Creating register for signal `\traceback.\out_r' using process `\traceback.$proc$traceback.v:33$126'.
  created $dff cell `$procdff$3912' with positive edge clock.
Creating register for signal `\traceback.\out_q' using process `\traceback.$proc$traceback.v:33$126'.
  created $dff cell `$procdff$3913' with positive edge clock.
Creating register for signal `\traceback.\activated' using process `\traceback.$proc$traceback.v:33$126'.
  created $dff cell `$procdff$3914' with positive edge clock.
Creating register for signal `\traceback.\q_ctr' using process `\traceback.$proc$traceback.v:33$126'.
  created $dff cell `$procdff$3915' with positive edge clock.
Creating register for signal `\traceback.\r_ctr' using process `\traceback.$proc$traceback.v:33$126'.
  created $dff cell `$procdff$3916' with positive edge clock.
Creating register for signal `\shift_reg.\out' using process `\shift_reg.$proc$shift_reg.v:30$118'.
  created $dff cell `$procdff$3917' with positive edge clock.
Creating register for signal `\pe_unit.\out_current' using process `\pe_unit.$proc$pe_unit.v:63$114'.
  created $dff cell `$procdff$3918' with positive edge clock.
Creating register for signal `\pe_unit.\out_prev' using process `\pe_unit.$proc$pe_unit.v:63$114'.
  created $dff cell `$procdff$3919' with positive edge clock.
Creating register for signal `\bsw_acc.\Q_aligned' using process `\bsw_acc.$proc$bsw_acc.v:243$58'.
  created $dff cell `$procdff$3920' with positive edge clock.
Creating register for signal `\bsw_acc.\R_aligned' using process `\bsw_acc.$proc$bsw_acc.v:243$58'.
  created $dff cell `$procdff$3921' with positive edge clock.
Creating register for signal `\bsw_acc.\ctr' using process `\bsw_acc.$proc$bsw_acc.v:243$58'.
  created $dff cell `$procdff$3922' with positive edge clock.
Creating register for signal `\bsw_acc.\stop_traceback' using process `\bsw_acc.$proc$bsw_acc.v:233$57'.
  created $dff cell `$procdff$3923' with positive edge clock.
Creating register for signal `\bsw_acc.$memwr$\pe1_mem$bsw_acc.v:205$1_ADDR' using process `\bsw_acc.$proc$bsw_acc.v:202$22'.
  created $dff cell `$procdff$3924' with positive edge clock.
Creating register for signal `\bsw_acc.$memwr$\pe1_mem$bsw_acc.v:205$1_DATA' using process `\bsw_acc.$proc$bsw_acc.v:202$22'.
  created $dff cell `$procdff$3925' with positive edge clock.
Creating register for signal `\bsw_acc.$memwr$\pe1_mem$bsw_acc.v:205$1_EN' using process `\bsw_acc.$proc$bsw_acc.v:202$22'.
  created $dff cell `$procdff$3926' with positive edge clock.
Creating register for signal `\bsw_acc.$memwr$\pe2_mem$bsw_acc.v:208$2_ADDR' using process `\bsw_acc.$proc$bsw_acc.v:202$22'.
  created $dff cell `$procdff$3927' with positive edge clock.
Creating register for signal `\bsw_acc.$memwr$\pe2_mem$bsw_acc.v:208$2_DATA' using process `\bsw_acc.$proc$bsw_acc.v:202$22'.
  created $dff cell `$procdff$3928' with positive edge clock.
Creating register for signal `\bsw_acc.$memwr$\pe2_mem$bsw_acc.v:208$2_EN' using process `\bsw_acc.$proc$bsw_acc.v:202$22'.
  created $dff cell `$procdff$3929' with positive edge clock.
Creating register for signal `\bsw_acc.$memwr$\pe3_mem$bsw_acc.v:211$3_ADDR' using process `\bsw_acc.$proc$bsw_acc.v:202$22'.
  created $dff cell `$procdff$3930' with positive edge clock.
Creating register for signal `\bsw_acc.$memwr$\pe3_mem$bsw_acc.v:211$3_DATA' using process `\bsw_acc.$proc$bsw_acc.v:202$22'.
  created $dff cell `$procdff$3931' with positive edge clock.
Creating register for signal `\bsw_acc.$memwr$\pe3_mem$bsw_acc.v:211$3_EN' using process `\bsw_acc.$proc$bsw_acc.v:202$22'.
  created $dff cell `$procdff$3932' with positive edge clock.
Creating register for signal `\bsw_acc.$memwr$\pe4_mem$bsw_acc.v:214$4_ADDR' using process `\bsw_acc.$proc$bsw_acc.v:202$22'.
  created $dff cell `$procdff$3933' with positive edge clock.
Creating register for signal `\bsw_acc.$memwr$\pe4_mem$bsw_acc.v:214$4_DATA' using process `\bsw_acc.$proc$bsw_acc.v:202$22'.
  created $dff cell `$procdff$3934' with positive edge clock.
Creating register for signal `\bsw_acc.$memwr$\pe4_mem$bsw_acc.v:214$4_EN' using process `\bsw_acc.$proc$bsw_acc.v:202$22'.
  created $dff cell `$procdff$3935' with positive edge clock.
Creating register for signal `\bsw_acc.\in_r' using process `\bsw_acc.$proc$bsw_acc.v:110$7'.
  created $dff cell `$procdff$3936' with positive edge clock.
Creating register for signal `\bsw_acc.\in_q' using process `\bsw_acc.$proc$bsw_acc.v:110$7'.
  created $dff cell `$procdff$3937' with positive edge clock.
Creating register for signal `\bsw_acc.\en_r' using process `\bsw_acc.$proc$bsw_acc.v:110$7'.
  created $dff cell `$procdff$3938' with positive edge clock.
Creating register for signal `\bsw_acc.\en_q' using process `\bsw_acc.$proc$bsw_acc.v:110$7'.
  created $dff cell `$procdff$3939' with positive edge clock.
Creating register for signal `\bsw_acc.\pe_valid' using process `\bsw_acc.$proc$bsw_acc.v:110$7'.
  created $dff cell `$procdff$3940' with positive edge clock.
Creating register for signal `\bsw_acc.\count1' using process `\bsw_acc.$proc$bsw_acc.v:110$7'.
  created $dff cell `$procdff$3941' with positive edge clock.
Creating register for signal `\bsw_acc.\count2' using process `\bsw_acc.$proc$bsw_acc.v:110$7'.
  created $dff cell `$procdff$3942' with positive edge clock.
Creating register for signal `\bsw_acc.\count3' using process `\bsw_acc.$proc$bsw_acc.v:110$7'.
  created $dff cell `$procdff$3943' with positive edge clock.
Creating register for signal `\bsw_acc.\start_traceback' using process `\bsw_acc.$proc$bsw_acc.v:110$7'.
  created $dff cell `$procdff$3944' with positive edge clock.

6.5.1.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\traceback.$proc$traceback.v:33$126'.
Removing empty process `traceback.$proc$traceback.v:33$126'.
Removing empty process `shift_reg.$proc$shift_reg.v:26$119'.
Found and cleaned up 2 empty switches in `\shift_reg.$proc$shift_reg.v:30$118'.
Removing empty process `shift_reg.$proc$shift_reg.v:30$118'.
Found and cleaned up 1 empty switch in `\pe_unit.$proc$pe_unit.v:63$114'.
Removing empty process `pe_unit.$proc$pe_unit.v:63$114'.
Found and cleaned up 3 empty switches in `\pe_unit.$proc$pe_unit.v:42$104'.
Removing empty process `pe_unit.$proc$pe_unit.v:42$104'.
Found and cleaned up 2 empty switches in `\pe_top.$proc$pe_top.v:94$97'.
Removing empty process `pe_top.$proc$pe_top.v:94$97'.
Found and cleaned up 4 empty switches in `\pe_top.$proc$pe_top.v:72$87'.
Removing empty process `pe_top.$proc$pe_top.v:72$87'.
Removing empty process `bsw_acc.$proc$bsw_acc.v:99$78'.
Found and cleaned up 8 empty switches in `\bsw_acc.$proc$bsw_acc.v:243$58'.
Removing empty process `bsw_acc.$proc$bsw_acc.v:243$58'.
Found and cleaned up 1 empty switch in `\bsw_acc.$proc$bsw_acc.v:233$57'.
Removing empty process `bsw_acc.$proc$bsw_acc.v:233$57'.
Found and cleaned up 1 empty switch in `\bsw_acc.$proc$bsw_acc.v:221$51'.
Removing empty process `bsw_acc.$proc$bsw_acc.v:221$51'.
Found and cleaned up 8 empty switches in `\bsw_acc.$proc$bsw_acc.v:202$22'.
Removing empty process `bsw_acc.$proc$bsw_acc.v:202$22'.
Found and cleaned up 6 empty switches in `\bsw_acc.$proc$bsw_acc.v:110$7'.
Removing empty process `bsw_acc.$proc$bsw_acc.v:110$7'.
Cleaned up 40 empty switches.

6.5.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module traceback.
<suppressed ~2 debug messages>
Optimizing module shift_reg.
<suppressed ~2 debug messages>
Optimizing module pe_unit.
<suppressed ~1 debug messages>
Optimizing module pe_top.
<suppressed ~2 debug messages>
Optimizing module bsw_acc.
<suppressed ~9 debug messages>

6.5.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \traceback..
Finding unused cells or wires in module \shift_reg..
Finding unused cells or wires in module \pe_unit..
Finding unused cells or wires in module \pe_top..
Finding unused cells or wires in module \bsw_acc..
Removed 1 unused cells and 391 unused wires.
<suppressed ~6 debug messages>

6.5.4. Executing CHECK pass (checking for obvious problems).
checking module bsw_acc..
checking module pe_top..
checking module pe_unit..
checking module shift_reg..
checking module traceback..
found and reported 0 problems.

6.5.5. Executing OPT pass (performing simple optimizations).

6.5.5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsw_acc.
Optimizing module pe_top.
Optimizing module pe_unit.
Optimizing module shift_reg.
Optimizing module traceback.

6.5.5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsw_acc'.
<suppressed ~303 debug messages>
Finding identical cells in module `\pe_top'.
<suppressed ~150 debug messages>
Finding identical cells in module `\pe_unit'.
Finding identical cells in module `\shift_reg'.
Finding identical cells in module `\traceback'.
<suppressed ~120 debug messages>
Removed a total of 191 cells.

6.5.5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \bsw_acc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pe_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$424.
    dead port 2/2 on $mux $procmux$330.
    dead port 2/2 on $mux $procmux$337.
    dead port 2/2 on $mux $procmux$344.
    dead port 2/2 on $mux $procmux$350.
    dead port 2/2 on $mux $procmux$357.
    dead port 2/2 on $mux $procmux$364.
    dead port 2/2 on $mux $procmux$370.
    dead port 2/2 on $mux $procmux$377.
    dead port 2/2 on $mux $procmux$384.
    dead port 2/2 on $mux $procmux$390.
    dead port 2/2 on $mux $procmux$397.
    dead port 2/2 on $mux $procmux$404.
    dead port 2/2 on $mux $procmux$410.
    dead port 2/2 on $mux $procmux$417.
    dead port 1/2 on $mux $procmux$501.
    dead port 1/2 on $mux $procmux$504.
    dead port 1/2 on $mux $procmux$510.
    dead port 1/2 on $mux $procmux$513.
    dead port 2/2 on $mux $procmux$519.
    dead port 1/2 on $mux $procmux$522.
    dead port 1/2 on $mux $procmux$528.
    dead port 1/2 on $mux $procmux$534.
Running muxtree optimizer on module \pe_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$294.
    dead port 1/2 on $mux $procmux$297.
    dead port 1/2 on $mux $procmux$303.
    dead port 1/2 on $mux $procmux$306.
    dead port 1/2 on $mux $procmux$312.
    dead port 1/2 on $mux $procmux$318.
Running muxtree optimizer on module \shift_reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \traceback..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 29 multiplexer ports.
<suppressed ~118 debug messages>

6.5.5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \bsw_acc.
    Consolidated identical input bits for $mux cell $procmux$3706:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$3706_Y
      New ports: A=1'0, B=1'1, Y=$procmux$3706_Y [0]
      New connections: $procmux$3706_Y [7:1] = { $procmux$3706_Y [0] $procmux$3706_Y [0] $procmux$3706_Y [0] $procmux$3706_Y [0] $procmux$3706_Y [0] $procmux$3706_Y [0] $procmux$3706_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$3718:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$3718_Y
      New ports: A=1'0, B=1'1, Y=$procmux$3718_Y [0]
      New connections: $procmux$3718_Y [7:1] = { $procmux$3718_Y [0] $procmux$3718_Y [0] $procmux$3718_Y [0] $procmux$3718_Y [0] $procmux$3718_Y [0] $procmux$3718_Y [0] $procmux$3718_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$3730:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$3730_Y
      New ports: A=1'0, B=1'1, Y=$procmux$3730_Y [0]
      New connections: $procmux$3730_Y [7:1] = { $procmux$3730_Y [0] $procmux$3730_Y [0] $procmux$3730_Y [0] $procmux$3730_Y [0] $procmux$3730_Y [0] $procmux$3730_Y [0] $procmux$3730_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$3742:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$3742_Y
      New ports: A=1'0, B=1'1, Y=$procmux$3742_Y [0]
      New connections: $procmux$3742_Y [7:1] = { $procmux$3742_Y [0] $procmux$3742_Y [0] $procmux$3742_Y [0] $procmux$3742_Y [0] $procmux$3742_Y [0] $procmux$3742_Y [0] $procmux$3742_Y [0] }
    New ctrl vector for $mux cell $procmux$3810: { }
  Optimizing cells in module \bsw_acc.
    Consolidated identical input bits for $mux cell $procmux$3708:
      Old ports: A=8'00000000, B=$procmux$3706_Y, Y=$0$memwr$\pe1_mem$bsw_acc.v:205$1_EN[7:0]$25
      New ports: A=1'0, B=$procmux$3706_Y [0], Y=$0$memwr$\pe1_mem$bsw_acc.v:205$1_EN[7:0]$25 [0]
      New connections: $0$memwr$\pe1_mem$bsw_acc.v:205$1_EN[7:0]$25 [7:1] = { $0$memwr$\pe1_mem$bsw_acc.v:205$1_EN[7:0]$25 [0] $0$memwr$\pe1_mem$bsw_acc.v:205$1_EN[7:0]$25 [0] $0$memwr$\pe1_mem$bsw_acc.v:205$1_EN[7:0]$25 [0] $0$memwr$\pe1_mem$bsw_acc.v:205$1_EN[7:0]$25 [0] $0$memwr$\pe1_mem$bsw_acc.v:205$1_EN[7:0]$25 [0] $0$memwr$\pe1_mem$bsw_acc.v:205$1_EN[7:0]$25 [0] $0$memwr$\pe1_mem$bsw_acc.v:205$1_EN[7:0]$25 [0] }
    Consolidated identical input bits for $mux cell $procmux$3720:
      Old ports: A=8'00000000, B=$procmux$3718_Y, Y=$0$memwr$\pe2_mem$bsw_acc.v:208$2_EN[7:0]$28
      New ports: A=1'0, B=$procmux$3718_Y [0], Y=$0$memwr$\pe2_mem$bsw_acc.v:208$2_EN[7:0]$28 [0]
      New connections: $0$memwr$\pe2_mem$bsw_acc.v:208$2_EN[7:0]$28 [7:1] = { $0$memwr$\pe2_mem$bsw_acc.v:208$2_EN[7:0]$28 [0] $0$memwr$\pe2_mem$bsw_acc.v:208$2_EN[7:0]$28 [0] $0$memwr$\pe2_mem$bsw_acc.v:208$2_EN[7:0]$28 [0] $0$memwr$\pe2_mem$bsw_acc.v:208$2_EN[7:0]$28 [0] $0$memwr$\pe2_mem$bsw_acc.v:208$2_EN[7:0]$28 [0] $0$memwr$\pe2_mem$bsw_acc.v:208$2_EN[7:0]$28 [0] $0$memwr$\pe2_mem$bsw_acc.v:208$2_EN[7:0]$28 [0] }
    Consolidated identical input bits for $mux cell $procmux$3732:
      Old ports: A=8'00000000, B=$procmux$3730_Y, Y=$0$memwr$\pe3_mem$bsw_acc.v:211$3_EN[7:0]$31
      New ports: A=1'0, B=$procmux$3730_Y [0], Y=$0$memwr$\pe3_mem$bsw_acc.v:211$3_EN[7:0]$31 [0]
      New connections: $0$memwr$\pe3_mem$bsw_acc.v:211$3_EN[7:0]$31 [7:1] = { $0$memwr$\pe3_mem$bsw_acc.v:211$3_EN[7:0]$31 [0] $0$memwr$\pe3_mem$bsw_acc.v:211$3_EN[7:0]$31 [0] $0$memwr$\pe3_mem$bsw_acc.v:211$3_EN[7:0]$31 [0] $0$memwr$\pe3_mem$bsw_acc.v:211$3_EN[7:0]$31 [0] $0$memwr$\pe3_mem$bsw_acc.v:211$3_EN[7:0]$31 [0] $0$memwr$\pe3_mem$bsw_acc.v:211$3_EN[7:0]$31 [0] $0$memwr$\pe3_mem$bsw_acc.v:211$3_EN[7:0]$31 [0] }
    Consolidated identical input bits for $mux cell $procmux$3744:
      Old ports: A=8'00000000, B=$procmux$3742_Y, Y=$0$memwr$\pe4_mem$bsw_acc.v:214$4_EN[7:0]$34
      New ports: A=1'0, B=$procmux$3742_Y [0], Y=$0$memwr$\pe4_mem$bsw_acc.v:214$4_EN[7:0]$34 [0]
      New connections: $0$memwr$\pe4_mem$bsw_acc.v:214$4_EN[7:0]$34 [7:1] = { $0$memwr$\pe4_mem$bsw_acc.v:214$4_EN[7:0]$34 [0] $0$memwr$\pe4_mem$bsw_acc.v:214$4_EN[7:0]$34 [0] $0$memwr$\pe4_mem$bsw_acc.v:214$4_EN[7:0]$34 [0] $0$memwr$\pe4_mem$bsw_acc.v:214$4_EN[7:0]$34 [0] $0$memwr$\pe4_mem$bsw_acc.v:214$4_EN[7:0]$34 [0] $0$memwr$\pe4_mem$bsw_acc.v:214$4_EN[7:0]$34 [0] $0$memwr$\pe4_mem$bsw_acc.v:214$4_EN[7:0]$34 [0] }
  Optimizing cells in module \bsw_acc.
  Optimizing cells in module \pe_top.
    New ctrl vector for $pmux cell $procmux$455: { $procmux$331_CMP $auto$opt_reduce.cc:132:opt_mux$3946 }
    New ctrl vector for $pmux cell $procmux$460: { $procmux$331_CMP $auto$opt_reduce.cc:132:opt_mux$3948 }
    New ctrl vector for $pmux cell $procmux$432: { $procmux$331_CMP $auto$opt_reduce.cc:132:opt_mux$3950 }
    New ctrl vector for $pmux cell $procmux$465: { $procmux$331_CMP $auto$opt_reduce.cc:132:opt_mux$3952 }
    New ctrl vector for $pmux cell $procmux$470: { $procmux$331_CMP $auto$opt_reduce.cc:132:opt_mux$3954 }
    New ctrl vector for $pmux cell $procmux$475: { $procmux$331_CMP $auto$opt_reduce.cc:132:opt_mux$3956 }
    New ctrl vector for $pmux cell $procmux$480: { $procmux$331_CMP $auto$opt_reduce.cc:132:opt_mux$3958 }
    New ctrl vector for $pmux cell $procmux$437: { $procmux$331_CMP $auto$opt_reduce.cc:132:opt_mux$3960 }
    New ctrl vector for $pmux cell $procmux$427: { $procmux$331_CMP $auto$opt_reduce.cc:132:opt_mux$3962 }
    New ctrl vector for $pmux cell $procmux$450: { $procmux$331_CMP $auto$opt_reduce.cc:132:opt_mux$3964 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3945: { $procmux$428_CMP $procmux$430_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3947: { $procmux$428_CMP $procmux$430_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3949: { $procmux$428_CMP $procmux$430_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3951: { $procmux$428_CMP $procmux$430_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3953: { $procmux$428_CMP $procmux$430_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3955: { $procmux$428_CMP $procmux$430_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3957: { $procmux$428_CMP $procmux$430_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3959: { $procmux$428_CMP $procmux$430_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3961: { $procmux$428_CMP $procmux$430_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3963: { $procmux$428_CMP $procmux$430_CMP }
  Optimizing cells in module \pe_top.
  Optimizing cells in module \pe_unit.
  Optimizing cells in module \shift_reg.
  Optimizing cells in module \traceback.
    New ctrl vector for $pmux cell $procmux$216: $auto$opt_reduce.cc:132:opt_mux$3966
    New ctrl vector for $pmux cell $procmux$229: { $procmux$159_CMP $auto$opt_reduce.cc:132:opt_mux$3970 $auto$opt_reduce.cc:132:opt_mux$3968 }
    New ctrl vector for $pmux cell $procmux$246: { $auto$opt_reduce.cc:132:opt_mux$3974 $auto$opt_reduce.cc:132:opt_mux$3972 $procmux$154_CMP }
    New ctrl vector for $pmux cell $procmux$153: $auto$opt_reduce.cc:132:opt_mux$3976
    New ctrl vector for $pmux cell $procmux$263: $auto$opt_reduce.cc:132:opt_mux$3978
    New ctrl vector for $pmux cell $procmux$170: $auto$opt_reduce.cc:132:opt_mux$3980
    New ctrl vector for $pmux cell $procmux$202: $auto$opt_reduce.cc:132:opt_mux$3982
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3965: { $procmux$155_CMP $procmux$159_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3967: { $procmux$154_CMP $procmux$156_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3969: { $procmux$155_CMP $procmux$157_CMP $procmux$158_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3971: { $procmux$155_CMP $procmux$156_CMP $procmux$158_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3973: { $procmux$157_CMP $procmux$159_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3975: { $procmux$155_CMP $procmux$159_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3977: { $procmux$155_CMP $procmux$154_CMP $procmux$156_CMP $procmux$157_CMP $procmux$158_CMP $procmux$159_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3979: { $procmux$154_CMP $procmux$158_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3981: { $procmux$154_CMP $procmux$158_CMP }
  Optimizing cells in module \traceback.
Performed a total of 45 changes.

6.5.5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsw_acc'.
<suppressed ~12 debug messages>
Finding identical cells in module `\pe_top'.
<suppressed ~42 debug messages>
Finding identical cells in module `\pe_unit'.
Finding identical cells in module `\shift_reg'.
Finding identical cells in module `\traceback'.
<suppressed ~6 debug messages>
Removed a total of 20 cells.

6.5.5.6. Executing OPT_RMDFF pass (remove dff with constant values).

6.5.5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsw_acc..
Finding unused cells or wires in module \pe_top..
Finding unused cells or wires in module \pe_unit..
Finding unused cells or wires in module \shift_reg..
Finding unused cells or wires in module \traceback..
Removed 0 unused cells and 239 unused wires.
<suppressed ~4 debug messages>

6.5.5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsw_acc.
Optimizing module pe_top.
Optimizing module pe_unit.
Optimizing module shift_reg.
Optimizing module traceback.

6.5.5.9. Rerunning OPT passes. (Maybe there is more to do..)

6.5.5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \bsw_acc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pe_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pe_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shift_reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \traceback..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~119 debug messages>

6.5.5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \bsw_acc.
  Optimizing cells in module \pe_top.
  Optimizing cells in module \pe_unit.
  Optimizing cells in module \shift_reg.
  Optimizing cells in module \traceback.
Performed a total of 0 changes.

6.5.5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsw_acc'.
Finding identical cells in module `\pe_top'.
Finding identical cells in module `\pe_unit'.
Finding identical cells in module `\shift_reg'.
Finding identical cells in module `\traceback'.
Removed a total of 0 cells.

6.5.5.13. Executing OPT_RMDFF pass (remove dff with constant values).

6.5.5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsw_acc..
Finding unused cells or wires in module \pe_top..
Finding unused cells or wires in module \pe_unit..
Finding unused cells or wires in module \shift_reg..
Finding unused cells or wires in module \traceback..

6.5.5.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsw_acc.
Optimizing module pe_top.
Optimizing module pe_unit.
Optimizing module shift_reg.
Optimizing module traceback.

6.5.5.16. Finished OPT passes. (There is nothing left to do.)

6.5.6. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 address bits (of 8) from memory read port bsw_acc.$memrd$\pe1_mem$bsw_acc.v:223$52 (pe1_mem).
Removed top 4 address bits (of 8) from memory read port bsw_acc.$memrd$\pe2_mem$bsw_acc.v:224$53 (pe2_mem).
Removed top 4 address bits (of 8) from memory read port bsw_acc.$memrd$\pe3_mem$bsw_acc.v:225$54 (pe3_mem).
Removed top 4 address bits (of 8) from memory read port bsw_acc.$memrd$\pe4_mem$bsw_acc.v:226$55 (pe4_mem).
Removed top 28 address bits (of 32) from memory write port bsw_acc.$memwr$\pe1_mem$bsw_acc.v:205$74 (pe1_mem).
Removed top 28 address bits (of 32) from memory write port bsw_acc.$memwr$\pe2_mem$bsw_acc.v:208$75 (pe2_mem).
Removed top 28 address bits (of 32) from memory write port bsw_acc.$memwr$\pe3_mem$bsw_acc.v:211$76 (pe3_mem).
Removed top 28 address bits (of 32) from memory write port bsw_acc.$memwr$\pe4_mem$bsw_acc.v:214$77 (pe4_mem).
Removed top 31 bits (of 32) from port B of cell bsw_acc.$add$bsw_acc.v:144$11 ($add).
Removed top 24 bits (of 32) from port Y of cell bsw_acc.$add$bsw_acc.v:144$11 ($add).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$lt$bsw_acc.v:127$8 ($lt).
Removed top 30 bits (of 32) from port B of cell bsw_acc.$add$bsw_acc.v:133$9 ($add).
Removed top 27 bits (of 32) from port Y of cell bsw_acc.$add$bsw_acc.v:133$9 ($add).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$lt$bsw_acc.v:139$10 ($lt).
Removed top 30 bits (of 32) from port B of cell bsw_acc.$add$bsw_acc.v:146$12 ($add).
Removed top 27 bits (of 32) from port Y of cell bsw_acc.$add$bsw_acc.v:146$12 ($add).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$lt$bsw_acc.v:150$13 ($lt).
Removed top 24 bits (of 32) from port Y of cell bsw_acc.$mod$bsw_acc.v:151$14 ($and).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$le$bsw_acc.v:174$20 ($le).
Removed top 30 bits (of 32) from port B of cell bsw_acc.$sub$bsw_acc.v:205$38 ($sub).
Removed top 30 bits (of 32) from port B of cell bsw_acc.$ge$bsw_acc.v:203$35 ($ge).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$lt$bsw_acc.v:203$36 ($lt).
Removed top 30 bits (of 32) from port B of cell bsw_acc.$ge$bsw_acc.v:206$39 ($ge).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$lt$bsw_acc.v:206$40 ($lt).
Removed top 30 bits (of 32) from port B of cell bsw_acc.$sub$bsw_acc.v:208$42 ($sub).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$ge$bsw_acc.v:209$43 ($ge).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$lt$bsw_acc.v:209$44 ($lt).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$sub$bsw_acc.v:211$46 ($sub).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$ge$bsw_acc.v:212$47 ($ge).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$lt$bsw_acc.v:212$48 ($lt).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$sub$bsw_acc.v:214$50 ($sub).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$ge$bsw_acc.v:244$61 ($ge).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$sub$bsw_acc.v:245$63 ($sub).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$sub$bsw_acc.v:246$64 ($sub).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$sub$bsw_acc.v:247$65 ($sub).
Removed top 30 bits (of 32) from port B of cell bsw_acc.$add$bsw_acc.v:251$69 ($add).
Removed top 24 bits (of 32) from port Y of cell bsw_acc.$add$bsw_acc.v:251$69 ($add).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1064_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1009_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1026_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1043_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1082_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1100_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1183_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1122_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1141_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1160_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1203_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1223_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1314_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1247_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1268_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1289_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1336_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1358_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$procmux$1457_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1384_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1407_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$1430_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$procmux$1481_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$procmux$1505_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$procmux$1612_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$procmux$1533_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$procmux$1558_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$procmux$1583_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$procmux$1638_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$procmux$1664_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell bsw_acc.$procmux$1779_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$procmux$1694_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$procmux$1721_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell bsw_acc.$procmux$1748_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell bsw_acc.$procmux$1807_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell bsw_acc.$procmux$1835_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell bsw_acc.$procmux$1958_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell bsw_acc.$procmux$1867_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell bsw_acc.$procmux$1896_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell bsw_acc.$procmux$1925_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell bsw_acc.$procmux$1988_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell bsw_acc.$procmux$2018_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2120_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2123_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2126_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2149_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2133_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2137_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2141_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2154_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2159_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2190_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2168_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2174_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2180_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2197_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2204_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2243_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2215_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2223_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2231_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2252_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2261_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2308_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2274_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2284_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2294_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2319_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2330_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2385_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2345_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2357_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2369_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2398_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2411_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2474_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2428_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2442_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2456_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2489_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$2504_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$2523_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$2539_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell bsw_acc.$procmux$2555_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$3691_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$3693_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell bsw_acc.$procmux$3695_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell bsw_acc.$procmux$3704_CMP0 ($eq).
Removed cell bsw_acc.$procmux$3710 ($mux).
Removed cell bsw_acc.$procmux$3712 ($mux).
Removed cell bsw_acc.$procmux$3714 ($mux).
Removed cell bsw_acc.$procmux$3716 ($mux).
Removed cell bsw_acc.$procmux$3726 ($mux).
Removed cell bsw_acc.$procmux$3722 ($mux).
Removed cell bsw_acc.$procmux$3724 ($mux).
Removed cell bsw_acc.$procmux$3728 ($mux).
Removed cell bsw_acc.$procmux$3734 ($mux).
Removed cell bsw_acc.$procmux$3736 ($mux).
Removed cell bsw_acc.$procmux$3738 ($mux).
Removed cell bsw_acc.$procmux$3740 ($mux).
Removed cell bsw_acc.$procmux$3750 ($mux).
Removed cell bsw_acc.$procmux$3746 ($mux).
Removed cell bsw_acc.$procmux$3748 ($mux).
Removed cell bsw_acc.$procmux$3752 ($mux).
Removed top 28 bits (of 32) from FF cell bsw_acc.$procdff$3924 ($dff).
Removed top 5 bits (of 8) from FF cell bsw_acc.$procdff$3925 ($dff).
Removed top 7 bits (of 8) from FF cell bsw_acc.$procdff$3926 ($dff).
Removed top 28 bits (of 32) from FF cell bsw_acc.$procdff$3927 ($dff).
Removed top 5 bits (of 8) from FF cell bsw_acc.$procdff$3928 ($dff).
Removed top 7 bits (of 8) from FF cell bsw_acc.$procdff$3929 ($dff).
Removed top 28 bits (of 32) from FF cell bsw_acc.$procdff$3930 ($dff).
Removed top 5 bits (of 8) from FF cell bsw_acc.$procdff$3931 ($dff).
Removed top 7 bits (of 8) from FF cell bsw_acc.$procdff$3932 ($dff).
Removed top 28 bits (of 32) from FF cell bsw_acc.$procdff$3933 ($dff).
Removed top 5 bits (of 8) from FF cell bsw_acc.$procdff$3934 ($dff).
Removed top 7 bits (of 8) from FF cell bsw_acc.$procdff$3935 ($dff).
Removed top 28 bits (of 32) from port Y of cell bsw_acc.$sub$bsw_acc.v:205$38 ($sub).
Removed top 4 bits (of 8) from port A of cell bsw_acc.$sub$bsw_acc.v:205$38 ($sub).
Removed top 28 bits (of 32) from port Y of cell bsw_acc.$sub$bsw_acc.v:208$42 ($sub).
Removed top 4 bits (of 8) from port A of cell bsw_acc.$sub$bsw_acc.v:208$42 ($sub).
Removed top 28 bits (of 32) from port Y of cell bsw_acc.$sub$bsw_acc.v:211$46 ($sub).
Removed top 4 bits (of 8) from port A of cell bsw_acc.$sub$bsw_acc.v:211$46 ($sub).
Removed top 28 bits (of 32) from port Y of cell bsw_acc.$sub$bsw_acc.v:214$50 ($sub).
Removed top 4 bits (of 8) from port A of cell bsw_acc.$sub$bsw_acc.v:214$50 ($sub).
Removed top 28 bits (of 32) from wire bsw_acc.$0$memwr$\pe1_mem$bsw_acc.v:205$1_ADDR[31:0]$23.
Removed top 5 bits (of 8) from wire bsw_acc.$0$memwr$\pe1_mem$bsw_acc.v:205$1_DATA[7:0]$24.
Removed top 28 bits (of 32) from wire bsw_acc.$0$memwr$\pe2_mem$bsw_acc.v:208$2_ADDR[31:0]$26.
Removed top 5 bits (of 8) from wire bsw_acc.$0$memwr$\pe2_mem$bsw_acc.v:208$2_DATA[7:0]$27.
Removed top 28 bits (of 32) from wire bsw_acc.$0$memwr$\pe3_mem$bsw_acc.v:211$3_ADDR[31:0]$29.
Removed top 5 bits (of 8) from wire bsw_acc.$0$memwr$\pe3_mem$bsw_acc.v:211$3_DATA[7:0]$30.
Removed top 28 bits (of 32) from wire bsw_acc.$0$memwr$\pe4_mem$bsw_acc.v:214$4_ADDR[31:0]$32.
Removed top 5 bits (of 8) from wire bsw_acc.$0$memwr$\pe4_mem$bsw_acc.v:214$4_DATA[7:0]$33.
Removed top 27 bits (of 32) from wire bsw_acc.$add$bsw_acc.v:133$9_Y.
Removed top 24 bits (of 32) from wire bsw_acc.$add$bsw_acc.v:144$11_Y.
Removed top 24 bits (of 32) from wire bsw_acc.$add$bsw_acc.v:251$69_Y.
Removed top 28 bits (of 32) from wire bsw_acc.$memwr$\pe1_mem$bsw_acc.v:205$1_ADDR.
Removed top 5 bits (of 8) from wire bsw_acc.$memwr$\pe2_mem$bsw_acc.v:208$2_DATA.
Removed top 5 bits (of 8) from wire bsw_acc.$procmux$3710_Y.
Removed top 5 bits (of 8) from wire bsw_acc.$procmux$3722_Y.
Removed top 5 bits (of 8) from wire bsw_acc.$procmux$3734_Y.
Removed top 5 bits (of 8) from wire bsw_acc.$procmux$3746_Y.
Removed top 24 bits (of 32) from port A of cell pe_top.$lt$pe_top.v:65$79 ($lt).
Removed top 31 bits (of 32) from port B of cell pe_top.$lt$pe_top.v:65$79 ($lt).
Removed top 1 bits (of 2) from mux cell pe_top.$ternary$pe_top.v:65$80 ($mux).
Removed top 24 bits (of 32) from port A of cell pe_top.$lt$pe_top.v:66$81 ($lt).
Removed top 30 bits (of 32) from port B of cell pe_top.$lt$pe_top.v:66$81 ($lt).
Removed top 1 bits (of 2) from mux cell pe_top.$ternary$pe_top.v:66$82 ($mux).
Removed top 24 bits (of 32) from port A of cell pe_top.$lt$pe_top.v:67$83 ($lt).
Removed top 29 bits (of 32) from port B of cell pe_top.$lt$pe_top.v:67$83 ($lt).
Removed top 1 bits (of 2) from mux cell pe_top.$ternary$pe_top.v:67$84 ($mux).
Removed top 24 bits (of 32) from port A of cell pe_top.$lt$pe_top.v:68$85 ($lt).
Removed top 29 bits (of 32) from port B of cell pe_top.$lt$pe_top.v:68$85 ($lt).
Removed top 1 bits (of 2) from mux cell pe_top.$ternary$pe_top.v:68$86 ($mux).
Removed top 29 bits (of 32) from port B of cell pe_top.$lt$pe_top.v:73$88 ($lt).
Removed top 31 bits (of 32) from port B of cell pe_top.$ge$pe_top.v:73$89 ($ge).
Removed top 28 bits (of 32) from port B of cell pe_top.$lt$pe_top.v:77$91 ($lt).
Removed top 31 bits (of 32) from port B of cell pe_top.$gt$pe_top.v:77$92 ($gt).
Removed top 24 bits (of 32) from port Y of cell pe_top.$mod$pe_top.v:79$94 ($and).
Removed top 28 bits (of 32) from port B of cell pe_top.$ge$pe_top.v:84$96 ($ge).
Removed top 1 bits (of 2) from port B of cell pe_top.$procmux$430_CMP0 ($eq).
Removed top 1 bits (of 2) from mux cell pe_top.$procmux$498 ($mux).
Removed top 1 bits (of 2) from mux cell pe_top.$procmux$517 ($mux).
Removed top 1 bits (of 2) from wire pe_top.$3\D[1:0].
Removed top 1 bits (of 2) from wire pe_top.$4\D[1:0].
Removed top 24 bits (of 32) from wire pe_top.$mod$pe_top.v:79$94_Y.
Removed top 1 bits (of 2) from wire pe_top.reset1.
Removed top 1 bits (of 2) from wire pe_top.reset3.
Removed top 24 bits (of 32) from port Y of cell pe_unit.$add$pe_unit.v:38$103 ($add).
Removed top 24 bits (of 32) from port B of cell pe_unit.$add$pe_unit.v:38$103 ($add).
Removed top 31 bits (of 32) from port B of cell pe_unit.$sub$pe_unit.v:36$99 ($sub).
Removed top 24 bits (of 32) from port Y of cell pe_unit.$sub$pe_unit.v:36$99 ($sub).
Removed top 31 bits (of 32) from port B of cell pe_unit.$sub$pe_unit.v:37$100 ($sub).
Removed top 24 bits (of 32) from port Y of cell pe_unit.$sub$pe_unit.v:37$100 ($sub).
Removed top 24 bits (of 32) from mux cell pe_unit.$ternary$pe_unit.v:38$102 ($mux).
Removed top 24 bits (of 32) from port A of cell pe_unit.$ge$pe_unit.v:43$108 ($ge).
Removed top 31 bits (of 32) from port B of cell pe_unit.$ge$pe_unit.v:43$108 ($ge).
Removed top 24 bits (of 32) from port A of cell pe_unit.$ge$pe_unit.v:47$111 ($ge).
Removed top 31 bits (of 32) from port B of cell pe_unit.$ge$pe_unit.v:47$111 ($ge).
Removed top 24 bits (of 32) from port A of cell pe_unit.$ge$pe_unit.v:51$113 ($ge).
Removed top 31 bits (of 32) from port B of cell pe_unit.$ge$pe_unit.v:51$113 ($ge).
Removed top 24 bits (of 32) from wire pe_unit.$ternary$pe_unit.v:38$102_Y.
Removed top 3 bits (of 12) from wire shift_reg.temp2.
Removed top 30 bits (of 32) from port A of cell traceback.$mul$traceback.v:31$124 ($mul).
Removed top 29 bits (of 32) from port A of cell traceback.$sub$traceback.v:30$120 ($sub).
Removed top 30 bits (of 32) from port A of cell traceback.$mul$traceback.v:30$121 ($mul).
Removed top 21 bits (of 24) from port Y of cell traceback.$shr$traceback.v:30$122 ($shr).
Removed top 29 bits (of 32) from port A of cell traceback.$sub$traceback.v:31$123 ($sub).
Removed top 21 bits (of 24) from port Y of cell traceback.$shr$traceback.v:31$125 ($shr).
Removed top 31 bits (of 32) from port B of cell traceback.$sub$traceback.v:58$133 ($sub).
Removed top 30 bits (of 32) from port Y of cell traceback.$sub$traceback.v:58$133 ($sub).
Removed top 31 bits (of 32) from port B of cell traceback.$sub$traceback.v:69$135 ($sub).
Removed top 24 bits (of 32) from port Y of cell traceback.$sub$traceback.v:69$135 ($sub).
Removed top 31 bits (of 32) from port B of cell traceback.$sub$traceback.v:103$145 ($sub).
Removed top 29 bits (of 32) from port Y of cell traceback.$sub$traceback.v:103$145 ($sub).
Removed top 31 bits (of 32) from port B of cell traceback.$add$traceback.v:108$146 ($add).
Removed top 30 bits (of 32) from port Y of cell traceback.$add$traceback.v:108$146 ($add).
Removed top 30 bits (of 32) from port B of cell traceback.$sub$traceback.v:109$147 ($sub).
Removed top 24 bits (of 32) from port Y of cell traceback.$sub$traceback.v:109$147 ($sub).
Removed top 31 bits (of 32) from port B of cell traceback.$sub$traceback.v:112$148 ($sub).
Removed top 29 bits (of 32) from port Y of cell traceback.$sub$traceback.v:112$148 ($sub).
Removed top 5 bits (of 8) from port B of cell traceback.$procmux$156_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell traceback.$procmux$155_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell traceback.$procmux$154_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell traceback.$procmux$157_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell traceback.$procmux$158_CMP0 ($eq).
Removed top 7 bits (of 8) from port B of cell traceback.$procmux$159_CMP0 ($eq).
Removed top 30 bits (of 32) from wire traceback.$add$traceback.v:108$146_Y.
Removed top 29 bits (of 32) from wire traceback.$sub$traceback.v:103$145_Y.
Removed top 30 bits (of 32) from wire traceback.$sub$traceback.v:58$133_Y.
Removed top 21 bits (of 24) from wire traceback.Q_sub_temp.

6.5.7. Executing PEEPOPT pass (run peephole optimizers).

6.5.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsw_acc..
Finding unused cells or wires in module \pe_top..
Finding unused cells or wires in module \pe_unit..
Finding unused cells or wires in module \shift_reg..
Finding unused cells or wires in module \traceback..
Removed 0 unused cells and 47 unused wires.
<suppressed ~5 debug messages>

6.5.9. Executing TECHMAP pass (map to technology primitives).

6.5.9.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

6.5.9.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~992 debug messages>

6.5.10. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module bsw_acc:
  creating $macc model for $add$bsw_acc.v:133$9 ($add).
  creating $macc model for $add$bsw_acc.v:144$11 ($add).
  creating $macc model for $add$bsw_acc.v:146$12 ($add).
  creating $macc model for $add$bsw_acc.v:251$69 ($add).
  creating $macc model for $sub$bsw_acc.v:205$38 ($sub).
  creating $macc model for $sub$bsw_acc.v:208$42 ($sub).
  creating $macc model for $sub$bsw_acc.v:211$46 ($sub).
  creating $macc model for $sub$bsw_acc.v:214$50 ($sub).
  creating $macc model for $sub$bsw_acc.v:245$63 ($sub).
  creating $macc model for $sub$bsw_acc.v:246$64 ($sub).
  creating $macc model for $sub$bsw_acc.v:247$65 ($sub).
  creating $macc model for $sub$bsw_acc.v:285$73 ($sub).
  creating $alu model for $macc $sub$bsw_acc.v:285$73.
  creating $alu model for $macc $sub$bsw_acc.v:247$65.
  creating $alu model for $macc $sub$bsw_acc.v:246$64.
  creating $alu model for $macc $sub$bsw_acc.v:245$63.
  creating $alu model for $macc $sub$bsw_acc.v:214$50.
  creating $alu model for $macc $sub$bsw_acc.v:211$46.
  creating $alu model for $macc $sub$bsw_acc.v:208$42.
  creating $alu model for $macc $sub$bsw_acc.v:205$38.
  creating $alu model for $macc $add$bsw_acc.v:251$69.
  creating $alu model for $macc $add$bsw_acc.v:146$12.
  creating $alu model for $macc $add$bsw_acc.v:144$11.
  creating $alu model for $macc $add$bsw_acc.v:133$9.
  creating $alu model for $ge$bsw_acc.v:203$35 ($ge): new $alu
  creating $alu model for $ge$bsw_acc.v:206$39 ($ge): new $alu
  creating $alu model for $ge$bsw_acc.v:209$43 ($ge): new $alu
  creating $alu model for $ge$bsw_acc.v:212$47 ($ge): new $alu
  creating $alu model for $ge$bsw_acc.v:244$61 ($ge): new $alu
  creating $alu model for $le$bsw_acc.v:174$20 ($le): new $alu
  creating $alu model for $lt$bsw_acc.v:127$8 ($lt): new $alu
  creating $alu model for $lt$bsw_acc.v:139$10 ($lt): merged with $ge$bsw_acc.v:209$43.
  creating $alu model for $lt$bsw_acc.v:150$13 ($lt): new $alu
  creating $alu model for $lt$bsw_acc.v:203$36 ($lt): new $alu
  creating $alu model for $lt$bsw_acc.v:206$40 ($lt): merged with $le$bsw_acc.v:174$20.
  creating $alu model for $lt$bsw_acc.v:209$44 ($lt): new $alu
  creating $alu model for $lt$bsw_acc.v:212$48 ($lt): new $alu
  creating $alu cell for $lt$bsw_acc.v:212$48: $auto$alumacc.cc:474:replace_alu$4022
  creating $alu cell for $lt$bsw_acc.v:209$44: $auto$alumacc.cc:474:replace_alu$4033
  creating $alu cell for $lt$bsw_acc.v:203$36: $auto$alumacc.cc:474:replace_alu$4044
  creating $alu cell for $lt$bsw_acc.v:150$13: $auto$alumacc.cc:474:replace_alu$4055
  creating $alu cell for $lt$bsw_acc.v:127$8: $auto$alumacc.cc:474:replace_alu$4066
  creating $alu cell for $le$bsw_acc.v:174$20, $lt$bsw_acc.v:206$40: $auto$alumacc.cc:474:replace_alu$4077
  creating $alu cell for $ge$bsw_acc.v:244$61: $auto$alumacc.cc:474:replace_alu$4090
  creating $alu cell for $ge$bsw_acc.v:212$47: $auto$alumacc.cc:474:replace_alu$4099
  creating $alu cell for $ge$bsw_acc.v:209$43, $lt$bsw_acc.v:139$10: $auto$alumacc.cc:474:replace_alu$4108
  creating $alu cell for $ge$bsw_acc.v:206$39: $auto$alumacc.cc:474:replace_alu$4121
  creating $alu cell for $ge$bsw_acc.v:203$35: $auto$alumacc.cc:474:replace_alu$4130
  creating $alu cell for $add$bsw_acc.v:133$9: $auto$alumacc.cc:474:replace_alu$4139
  creating $alu cell for $add$bsw_acc.v:144$11: $auto$alumacc.cc:474:replace_alu$4142
  creating $alu cell for $add$bsw_acc.v:146$12: $auto$alumacc.cc:474:replace_alu$4145
  creating $alu cell for $add$bsw_acc.v:251$69: $auto$alumacc.cc:474:replace_alu$4148
  creating $alu cell for $sub$bsw_acc.v:205$38: $auto$alumacc.cc:474:replace_alu$4151
  creating $alu cell for $sub$bsw_acc.v:208$42: $auto$alumacc.cc:474:replace_alu$4154
  creating $alu cell for $sub$bsw_acc.v:211$46: $auto$alumacc.cc:474:replace_alu$4157
  creating $alu cell for $sub$bsw_acc.v:214$50: $auto$alumacc.cc:474:replace_alu$4160
  creating $alu cell for $sub$bsw_acc.v:245$63: $auto$alumacc.cc:474:replace_alu$4163
  creating $alu cell for $sub$bsw_acc.v:246$64: $auto$alumacc.cc:474:replace_alu$4166
  creating $alu cell for $sub$bsw_acc.v:247$65: $auto$alumacc.cc:474:replace_alu$4169
  creating $alu cell for $sub$bsw_acc.v:285$73: $auto$alumacc.cc:474:replace_alu$4172
  created 23 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module pe_top:
  creating $alu model for $ge$pe_top.v:73$89 ($ge): new $alu
  creating $alu model for $ge$pe_top.v:84$96 ($ge): new $alu
  creating $alu model for $gt$pe_top.v:77$92 ($gt): merged with $ge$pe_top.v:73$89.
  creating $alu model for $lt$pe_top.v:65$79 ($lt): new $alu
  creating $alu model for $lt$pe_top.v:66$81 ($lt): new $alu
  creating $alu model for $lt$pe_top.v:67$83 ($lt): new $alu
  creating $alu model for $lt$pe_top.v:68$85 ($lt): new $alu
  creating $alu model for $lt$pe_top.v:73$88 ($lt): new $alu
  creating $alu model for $lt$pe_top.v:77$91 ($lt): merged with $ge$pe_top.v:84$96.
  creating $alu cell for $lt$pe_top.v:73$88: $auto$alumacc.cc:474:replace_alu$4182
  creating $alu cell for $lt$pe_top.v:68$85: $auto$alumacc.cc:474:replace_alu$4193
  creating $alu cell for $lt$pe_top.v:67$83: $auto$alumacc.cc:474:replace_alu$4206
  creating $alu cell for $lt$pe_top.v:66$81: $auto$alumacc.cc:474:replace_alu$4219
  creating $alu cell for $ge$pe_top.v:84$96, $lt$pe_top.v:77$91: $auto$alumacc.cc:474:replace_alu$4232
  creating $alu cell for $lt$pe_top.v:65$79: $auto$alumacc.cc:474:replace_alu$4245
  creating $alu cell for $ge$pe_top.v:73$89, $gt$pe_top.v:77$92: $auto$alumacc.cc:474:replace_alu$4258
  created 7 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module pe_unit:
  creating $macc model for $add$pe_unit.v:38$103 ($add).
  creating $macc model for $sub$pe_unit.v:36$99 ($sub).
  creating $macc model for $sub$pe_unit.v:37$100 ($sub).
  creating $alu model for $macc $sub$pe_unit.v:37$100.
  creating $alu model for $macc $sub$pe_unit.v:36$99.
  creating $alu model for $macc $add$pe_unit.v:38$103.
  creating $alu model for $ge$pe_unit.v:43$105 ($ge): new $alu
  creating $alu model for $ge$pe_unit.v:43$106 ($ge): new $alu
  creating $alu model for $ge$pe_unit.v:43$108 ($ge): new $alu
  creating $alu model for $ge$pe_unit.v:47$110 ($ge): new $alu
  creating $alu model for $ge$pe_unit.v:47$111 ($ge): new $alu
  creating $alu model for $ge$pe_unit.v:51$113 ($ge): new $alu
  creating $alu cell for $ge$pe_unit.v:51$113: $auto$alumacc.cc:474:replace_alu$4273
  creating $alu cell for $ge$pe_unit.v:47$111: $auto$alumacc.cc:474:replace_alu$4284
  creating $alu cell for $ge$pe_unit.v:47$110: $auto$alumacc.cc:474:replace_alu$4295
  creating $alu cell for $ge$pe_unit.v:43$108: $auto$alumacc.cc:474:replace_alu$4306
  creating $alu cell for $ge$pe_unit.v:43$106: $auto$alumacc.cc:474:replace_alu$4317
  creating $alu cell for $ge$pe_unit.v:43$105: $auto$alumacc.cc:474:replace_alu$4332
  creating $alu cell for $add$pe_unit.v:38$103: $auto$alumacc.cc:474:replace_alu$4347
  creating $alu cell for $sub$pe_unit.v:36$99: $auto$alumacc.cc:474:replace_alu$4350
  creating $alu cell for $sub$pe_unit.v:37$100: $auto$alumacc.cc:474:replace_alu$4353
  created 9 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module shift_reg:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module traceback:
  creating $macc model for $add$traceback.v:108$146 ($add).
  creating $macc model for $mul$traceback.v:30$121 ($mul).
  creating $macc model for $mul$traceback.v:31$124 ($mul).
  creating $macc model for $sub$traceback.v:103$145 ($sub).
  creating $macc model for $sub$traceback.v:109$147 ($sub).
  creating $macc model for $sub$traceback.v:112$148 ($sub).
  creating $macc model for $sub$traceback.v:30$120 ($sub).
  creating $macc model for $sub$traceback.v:31$123 ($sub).
  creating $macc model for $sub$traceback.v:58$133 ($sub).
  creating $macc model for $sub$traceback.v:69$135 ($sub).
  creating $alu model for $macc $sub$traceback.v:69$135.
  creating $alu model for $macc $sub$traceback.v:58$133.
  creating $alu model for $macc $sub$traceback.v:31$123.
  creating $alu model for $macc $sub$traceback.v:30$120.
  creating $alu model for $macc $sub$traceback.v:112$148.
  creating $alu model for $macc $sub$traceback.v:109$147.
  creating $alu model for $macc $sub$traceback.v:103$145.
  creating $alu model for $macc $add$traceback.v:108$146.
  creating $macc cell for $mul$traceback.v:30$121: $auto$alumacc.cc:354:replace_macc$4356
  creating $macc cell for $mul$traceback.v:31$124: $auto$alumacc.cc:354:replace_macc$4357
  creating $alu cell for $add$traceback.v:108$146: $auto$alumacc.cc:474:replace_alu$4358
  creating $alu cell for $sub$traceback.v:103$145: $auto$alumacc.cc:474:replace_alu$4361
  creating $alu cell for $sub$traceback.v:109$147: $auto$alumacc.cc:474:replace_alu$4364
  creating $alu cell for $sub$traceback.v:112$148: $auto$alumacc.cc:474:replace_alu$4367
  creating $alu cell for $sub$traceback.v:30$120: $auto$alumacc.cc:474:replace_alu$4370
  creating $alu cell for $sub$traceback.v:31$123: $auto$alumacc.cc:474:replace_alu$4373
  creating $alu cell for $sub$traceback.v:58$133: $auto$alumacc.cc:474:replace_alu$4376
  creating $alu cell for $sub$traceback.v:69$135: $auto$alumacc.cc:474:replace_alu$4379
  created 8 $alu and 2 $macc cells.

6.5.11. Executing SHARE pass (SAT-based resource sharing).
Found 6 cells in module bsw_acc that may be considered for resource sharing.
  Analyzing resource sharing options for $shl$bsw_acc.v:108$6 ($shl):
    Found 2 activation_patterns using ctrl signal { $auto$rtlil.cc:1832:Not$4076 $auto$rtlil.cc:1832:Not$4120 $auto$rtlil.cc:1832:Not$4065 $eq$bsw_acc.v:151$15_Y \start }.
    Found 1 candidates: $shl$bsw_acc.v:107$5
    Analyzing resource sharing with $shl$bsw_acc.v:107$5 ($shl):
      Found 2 activation_patterns using ctrl signal { $auto$rtlil.cc:1832:Not$4076 $auto$rtlil.cc:1832:Not$4120 $auto$rtlil.cc:1832:Not$4065 $eq$bsw_acc.v:151$15_Y \start }.
      Activation pattern for cell $shl$bsw_acc.v:108$6: { $auto$rtlil.cc:1832:Not$4076 $auto$rtlil.cc:1832:Not$4120 $auto$rtlil.cc:1832:Not$4065 $eq$bsw_acc.v:151$15_Y \start } = 5'00100
      Activation pattern for cell $shl$bsw_acc.v:108$6: { $auto$rtlil.cc:1832:Not$4076 $auto$rtlil.cc:1832:Not$4120 \start } = 3'010
      Activation pattern for cell $shl$bsw_acc.v:107$5: { $auto$rtlil.cc:1832:Not$4076 $auto$rtlil.cc:1832:Not$4120 $auto$rtlil.cc:1832:Not$4065 $eq$bsw_acc.v:151$15_Y \start } = 5'00110
      Activation pattern for cell $shl$bsw_acc.v:107$5: { $auto$rtlil.cc:1832:Not$4076 \start } = 2'10
      Size of SAT problem: 17 cells, 515 variables, 1383 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $shl$bsw_acc.v:107$5: $auto$share.cc:986:make_cell_activation_logic$4385
      New cell: $auto$share.cc:666:make_supercell$4392 ($shl)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$4392 ($shl):
    Found 3 activation_patterns using ctrl signal { $auto$rtlil.cc:1832:Not$4076 $auto$rtlil.cc:1832:Not$4120 $auto$rtlil.cc:1832:Not$4065 \start }.
    No candidates found.
  Analyzing resource sharing options for $memrd$\pe4_mem$bsw_acc.v:226$55 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$3702_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\pe3_mem$bsw_acc.v:225$54 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$3703_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\pe2_mem$bsw_acc.v:224$53 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$3704_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\pe1_mem$bsw_acc.v:223$52 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$3705_CMP.
    No candidates found.
Removing 2 cells in module bsw_acc:
  Removing cell $shl$bsw_acc.v:107$5 ($shl).
  Removing cell $shl$bsw_acc.v:108$6 ($shl).

6.5.12. Executing OPT pass (performing simple optimizations).

6.5.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsw_acc.
<suppressed ~27 debug messages>
Optimizing module pe_top.
<suppressed ~4 debug messages>
Optimizing module pe_unit.
Optimizing module shift_reg.
Optimizing module traceback.

6.5.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsw_acc'.
<suppressed ~3 debug messages>
Finding identical cells in module `\pe_top'.
Finding identical cells in module `\pe_unit'.
Finding identical cells in module `\shift_reg'.
Finding identical cells in module `\traceback'.
Removed a total of 1 cells.

6.5.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \bsw_acc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pe_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pe_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shift_reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \traceback..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~113 debug messages>

6.5.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \bsw_acc.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$4097: { $auto$rtlil.cc:1832:Not$4094 $auto$rtlil.cc:1835:ReduceAnd$4096 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$4128: { $auto$rtlil.cc:1832:Not$4125 $auto$rtlil.cc:1835:ReduceAnd$4127 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$4137: { $auto$rtlil.cc:1832:Not$4134 $auto$rtlil.cc:1835:ReduceAnd$4136 }
    New input vector for $reduce_or cell $auto$share.cc:987:make_cell_activation_logic$4386: { $auto$share.cc:976:make_cell_activation_logic$4382 [0] $auto$share.cc:976:make_cell_activation_logic$4382 [1] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4025: { $auto$alumacc.cc:490:replace_alu$4023 [0] $auto$alumacc.cc:490:replace_alu$4023 [1] $auto$alumacc.cc:490:replace_alu$4023 [2] $auto$alumacc.cc:490:replace_alu$4023 [3] $auto$alumacc.cc:490:replace_alu$4023 [4] $auto$alumacc.cc:490:replace_alu$4023 [5] $auto$alumacc.cc:490:replace_alu$4023 [6] $auto$alumacc.cc:490:replace_alu$4023 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4036: { $auto$alumacc.cc:490:replace_alu$4034 [0] $auto$alumacc.cc:490:replace_alu$4034 [1] $auto$alumacc.cc:490:replace_alu$4034 [2] $auto$alumacc.cc:490:replace_alu$4034 [3] $auto$alumacc.cc:490:replace_alu$4034 [4] $auto$alumacc.cc:490:replace_alu$4034 [5] $auto$alumacc.cc:490:replace_alu$4034 [6] $auto$alumacc.cc:490:replace_alu$4034 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4047: { $auto$alumacc.cc:490:replace_alu$4045 [0] $auto$alumacc.cc:490:replace_alu$4045 [1] $auto$alumacc.cc:490:replace_alu$4045 [2] $auto$alumacc.cc:490:replace_alu$4045 [3] $auto$alumacc.cc:490:replace_alu$4045 [4] $auto$alumacc.cc:490:replace_alu$4045 [5] $auto$alumacc.cc:490:replace_alu$4045 [6] $auto$alumacc.cc:490:replace_alu$4045 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4058: { $auto$alumacc.cc:490:replace_alu$4056 [0] $auto$alumacc.cc:490:replace_alu$4056 [1] $auto$alumacc.cc:490:replace_alu$4056 [2] $auto$alumacc.cc:490:replace_alu$4056 [3] $auto$alumacc.cc:490:replace_alu$4056 [4] $auto$alumacc.cc:490:replace_alu$4056 [5] $auto$alumacc.cc:490:replace_alu$4056 [6] $auto$alumacc.cc:490:replace_alu$4056 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4069: { $auto$alumacc.cc:490:replace_alu$4067 [0] $auto$alumacc.cc:490:replace_alu$4067 [1] $auto$alumacc.cc:490:replace_alu$4067 [2] $auto$alumacc.cc:490:replace_alu$4067 [3] $auto$alumacc.cc:490:replace_alu$4067 [4] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4080: { $auto$alumacc.cc:490:replace_alu$4078 [0] $auto$alumacc.cc:490:replace_alu$4078 [1] $auto$alumacc.cc:490:replace_alu$4078 [2] $auto$alumacc.cc:490:replace_alu$4078 [3] $auto$alumacc.cc:490:replace_alu$4078 [4] $auto$alumacc.cc:490:replace_alu$4078 [5] $auto$alumacc.cc:490:replace_alu$4078 [6] $auto$alumacc.cc:490:replace_alu$4078 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4095: { $auto$alumacc.cc:490:replace_alu$4091 [0] $auto$alumacc.cc:490:replace_alu$4091 [1] $auto$alumacc.cc:490:replace_alu$4091 [2] $auto$alumacc.cc:490:replace_alu$4091 [3] $auto$alumacc.cc:490:replace_alu$4091 [4] $auto$alumacc.cc:490:replace_alu$4091 [5] $auto$alumacc.cc:490:replace_alu$4091 [6] $auto$alumacc.cc:490:replace_alu$4091 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4104: { $auto$alumacc.cc:490:replace_alu$4100 [0] $auto$alumacc.cc:490:replace_alu$4100 [1] $auto$alumacc.cc:490:replace_alu$4100 [2] $auto$alumacc.cc:490:replace_alu$4100 [3] $auto$alumacc.cc:490:replace_alu$4100 [4] $auto$alumacc.cc:490:replace_alu$4100 [5] $auto$alumacc.cc:490:replace_alu$4100 [6] $auto$alumacc.cc:490:replace_alu$4100 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4113: { $auto$alumacc.cc:490:replace_alu$4109 [0] $auto$alumacc.cc:490:replace_alu$4109 [1] $auto$alumacc.cc:490:replace_alu$4109 [2] $auto$alumacc.cc:490:replace_alu$4109 [3] $auto$alumacc.cc:490:replace_alu$4109 [4] $auto$alumacc.cc:490:replace_alu$4109 [5] $auto$alumacc.cc:490:replace_alu$4109 [6] $auto$alumacc.cc:490:replace_alu$4109 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4126: { $auto$alumacc.cc:490:replace_alu$4122 [0] $auto$alumacc.cc:490:replace_alu$4122 [1] $auto$alumacc.cc:490:replace_alu$4122 [2] $auto$alumacc.cc:490:replace_alu$4122 [3] $auto$alumacc.cc:490:replace_alu$4122 [4] $auto$alumacc.cc:490:replace_alu$4122 [5] $auto$alumacc.cc:490:replace_alu$4122 [6] $auto$alumacc.cc:490:replace_alu$4122 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4135: { $auto$alumacc.cc:490:replace_alu$4131 [0] $auto$alumacc.cc:490:replace_alu$4131 [1] $auto$alumacc.cc:490:replace_alu$4131 [2] $auto$alumacc.cc:490:replace_alu$4131 [3] $auto$alumacc.cc:490:replace_alu$4131 [4] $auto$alumacc.cc:490:replace_alu$4131 [5] $auto$alumacc.cc:490:replace_alu$4131 [6] $auto$alumacc.cc:490:replace_alu$4131 [7] }
  Optimizing cells in module \bsw_acc.
  Optimizing cells in module \pe_top.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$4265: { $auto$rtlil.cc:1832:Not$4262 $auto$rtlil.cc:1835:ReduceAnd$4264 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4263: { $auto$alumacc.cc:490:replace_alu$4259 [0] $auto$alumacc.cc:490:replace_alu$4259 [1] $auto$alumacc.cc:490:replace_alu$4259 [2] $auto$alumacc.cc:490:replace_alu$4259 [3] $auto$alumacc.cc:490:replace_alu$4259 [4] $auto$alumacc.cc:490:replace_alu$4259 [5] $auto$alumacc.cc:490:replace_alu$4259 [6] $auto$alumacc.cc:490:replace_alu$4259 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4185: { $auto$alumacc.cc:490:replace_alu$4183 [0] $auto$alumacc.cc:490:replace_alu$4183 [1] $auto$alumacc.cc:490:replace_alu$4183 [2] $auto$alumacc.cc:490:replace_alu$4183 [3] $auto$alumacc.cc:490:replace_alu$4183 [4] $auto$alumacc.cc:490:replace_alu$4183 [5] $auto$alumacc.cc:490:replace_alu$4183 [6] $auto$alumacc.cc:490:replace_alu$4183 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4196: { $auto$alumacc.cc:490:replace_alu$4194 [0] $auto$alumacc.cc:490:replace_alu$4194 [1] $auto$alumacc.cc:490:replace_alu$4194 [2] $auto$alumacc.cc:490:replace_alu$4194 [3] $auto$alumacc.cc:490:replace_alu$4194 [4] $auto$alumacc.cc:490:replace_alu$4194 [5] $auto$alumacc.cc:490:replace_alu$4194 [6] $auto$alumacc.cc:490:replace_alu$4194 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4209: { $auto$alumacc.cc:490:replace_alu$4207 [0] $auto$alumacc.cc:490:replace_alu$4207 [1] $auto$alumacc.cc:490:replace_alu$4207 [2] $auto$alumacc.cc:490:replace_alu$4207 [3] $auto$alumacc.cc:490:replace_alu$4207 [4] $auto$alumacc.cc:490:replace_alu$4207 [5] $auto$alumacc.cc:490:replace_alu$4207 [6] $auto$alumacc.cc:490:replace_alu$4207 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4222: { $auto$alumacc.cc:490:replace_alu$4220 [0] $auto$alumacc.cc:490:replace_alu$4220 [1] $auto$alumacc.cc:490:replace_alu$4220 [2] $auto$alumacc.cc:490:replace_alu$4220 [3] $auto$alumacc.cc:490:replace_alu$4220 [4] $auto$alumacc.cc:490:replace_alu$4220 [5] $auto$alumacc.cc:490:replace_alu$4220 [6] $auto$alumacc.cc:490:replace_alu$4220 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4237: { $auto$alumacc.cc:490:replace_alu$4233 [0] $auto$alumacc.cc:490:replace_alu$4233 [1] $auto$alumacc.cc:490:replace_alu$4233 [2] $auto$alumacc.cc:490:replace_alu$4233 [3] $auto$alumacc.cc:490:replace_alu$4233 [4] $auto$alumacc.cc:490:replace_alu$4233 [5] $auto$alumacc.cc:490:replace_alu$4233 [6] $auto$alumacc.cc:490:replace_alu$4233 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4248: { $auto$alumacc.cc:490:replace_alu$4246 [0] $auto$alumacc.cc:490:replace_alu$4246 [1] $auto$alumacc.cc:490:replace_alu$4246 [2] $auto$alumacc.cc:490:replace_alu$4246 [3] $auto$alumacc.cc:490:replace_alu$4246 [4] $auto$alumacc.cc:490:replace_alu$4246 [5] $auto$alumacc.cc:490:replace_alu$4246 [6] $auto$alumacc.cc:490:replace_alu$4246 [7] }
  Optimizing cells in module \pe_top.
  Optimizing cells in module \pe_unit.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$4282: { $auto$rtlil.cc:1864:Xor$4279 $auto$rtlil.cc:1835:ReduceAnd$4281 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$4304: { $auto$rtlil.cc:1864:Xor$4301 $auto$rtlil.cc:1835:ReduceAnd$4303 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$4330: { $auto$rtlil.cc:1832:Not$4329 $auto$rtlil.cc:1835:ReduceAnd$4321 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4280: { $auto$alumacc.cc:490:replace_alu$4274 [0] $auto$alumacc.cc:490:replace_alu$4274 [1] $auto$alumacc.cc:490:replace_alu$4274 [2] $auto$alumacc.cc:490:replace_alu$4274 [3] $auto$alumacc.cc:490:replace_alu$4274 [4] $auto$alumacc.cc:490:replace_alu$4274 [5] $auto$alumacc.cc:490:replace_alu$4274 [6] $auto$alumacc.cc:490:replace_alu$4274 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4291: { $auto$alumacc.cc:490:replace_alu$4285 [0] $auto$alumacc.cc:490:replace_alu$4285 [1] $auto$alumacc.cc:490:replace_alu$4285 [2] $auto$alumacc.cc:490:replace_alu$4285 [3] $auto$alumacc.cc:490:replace_alu$4285 [4] $auto$alumacc.cc:490:replace_alu$4285 [5] $auto$alumacc.cc:490:replace_alu$4285 [6] $auto$alumacc.cc:490:replace_alu$4285 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4302: { $auto$alumacc.cc:490:replace_alu$4296 [0] $auto$alumacc.cc:490:replace_alu$4296 [1] $auto$alumacc.cc:490:replace_alu$4296 [2] $auto$alumacc.cc:490:replace_alu$4296 [3] $auto$alumacc.cc:490:replace_alu$4296 [4] $auto$alumacc.cc:490:replace_alu$4296 [5] $auto$alumacc.cc:490:replace_alu$4296 [6] $auto$alumacc.cc:490:replace_alu$4296 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4313: { $auto$alumacc.cc:490:replace_alu$4307 [0] $auto$alumacc.cc:490:replace_alu$4307 [1] $auto$alumacc.cc:490:replace_alu$4307 [2] $auto$alumacc.cc:490:replace_alu$4307 [3] $auto$alumacc.cc:490:replace_alu$4307 [4] $auto$alumacc.cc:490:replace_alu$4307 [5] $auto$alumacc.cc:490:replace_alu$4307 [6] $auto$alumacc.cc:490:replace_alu$4307 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4320: { $auto$alumacc.cc:490:replace_alu$4318 [0] $auto$alumacc.cc:490:replace_alu$4318 [1] $auto$alumacc.cc:490:replace_alu$4318 [2] $auto$alumacc.cc:490:replace_alu$4318 [3] $auto$alumacc.cc:490:replace_alu$4318 [4] $auto$alumacc.cc:490:replace_alu$4318 [5] $auto$alumacc.cc:490:replace_alu$4318 [6] $auto$alumacc.cc:490:replace_alu$4318 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$4335: { $auto$alumacc.cc:490:replace_alu$4333 [0] $auto$alumacc.cc:490:replace_alu$4333 [1] $auto$alumacc.cc:490:replace_alu$4333 [2] $auto$alumacc.cc:490:replace_alu$4333 [3] $auto$alumacc.cc:490:replace_alu$4333 [4] $auto$alumacc.cc:490:replace_alu$4333 [5] $auto$alumacc.cc:490:replace_alu$4333 [6] $auto$alumacc.cc:490:replace_alu$4333 [7] }
  Optimizing cells in module \pe_unit.
  Optimizing cells in module \shift_reg.
  Optimizing cells in module \traceback.
Performed a total of 32 changes.

6.5.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsw_acc'.
Finding identical cells in module `\pe_top'.
Finding identical cells in module `\pe_unit'.
Finding identical cells in module `\shift_reg'.
Finding identical cells in module `\traceback'.
Removed a total of 0 cells.

6.5.12.6. Executing OPT_RMDFF pass (remove dff with constant values).

6.5.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsw_acc..
Finding unused cells or wires in module \pe_top..
Finding unused cells or wires in module \pe_unit..
Finding unused cells or wires in module \shift_reg..
Finding unused cells or wires in module \traceback..
Removed 4 unused cells and 33 unused wires.
<suppressed ~8 debug messages>

6.5.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsw_acc.
Optimizing module pe_top.
Optimizing module pe_unit.
Optimizing module shift_reg.
Optimizing module traceback.

6.5.12.9. Rerunning OPT passes. (Maybe there is more to do..)

6.5.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \bsw_acc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pe_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pe_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shift_reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \traceback..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~113 debug messages>

6.5.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \bsw_acc.
  Optimizing cells in module \pe_top.
  Optimizing cells in module \pe_unit.
  Optimizing cells in module \shift_reg.
  Optimizing cells in module \traceback.
Performed a total of 0 changes.

6.5.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsw_acc'.
Finding identical cells in module `\pe_top'.
Finding identical cells in module `\pe_unit'.
Finding identical cells in module `\shift_reg'.
Finding identical cells in module `\traceback'.
Removed a total of 0 cells.

6.5.12.13. Executing OPT_RMDFF pass (remove dff with constant values).

6.5.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsw_acc..
Finding unused cells or wires in module \pe_top..
Finding unused cells or wires in module \pe_unit..
Finding unused cells or wires in module \shift_reg..
Finding unused cells or wires in module \traceback..

6.5.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsw_acc.
Optimizing module pe_top.
Optimizing module pe_unit.
Optimizing module shift_reg.
Optimizing module traceback.

6.5.12.16. Finished OPT passes. (There is nothing left to do.)

6.5.13. Executing FSM pass (extract and optimize FSM).

6.5.13.1. Executing FSM_DETECT pass (finding FSMs in design).

6.5.13.2. Executing FSM_EXTRACT pass (extracting FSM from design).

6.5.13.3. Executing FSM_OPT pass (simple optimizations of FSMs).

6.5.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsw_acc..
Finding unused cells or wires in module \pe_top..
Finding unused cells or wires in module \pe_unit..
Finding unused cells or wires in module \shift_reg..
Finding unused cells or wires in module \traceback..

6.5.13.5. Executing FSM_OPT pass (simple optimizations of FSMs).

6.5.13.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

6.5.13.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

6.5.13.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6.5.14. Executing OPT pass (performing simple optimizations).

6.5.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsw_acc.
Optimizing module pe_top.
Optimizing module pe_unit.
Optimizing module shift_reg.
Optimizing module traceback.

6.5.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsw_acc'.
Finding identical cells in module `\pe_top'.
Finding identical cells in module `\pe_unit'.
Finding identical cells in module `\shift_reg'.
Finding identical cells in module `\traceback'.
Removed a total of 0 cells.

6.5.14.3. Executing OPT_RMDFF pass (remove dff with constant values).

6.5.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsw_acc..
Finding unused cells or wires in module \pe_top..
Finding unused cells or wires in module \pe_unit..
Finding unused cells or wires in module \shift_reg..
Finding unused cells or wires in module \traceback..

6.5.14.5. Finished fast OPT passes.

6.5.15. Executing MEMORY pass.

6.5.15.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\pe1_mem$bsw_acc.v:205$74' in module `\bsw_acc': merged $dff to cell.
Checking cell `$memwr$\pe2_mem$bsw_acc.v:208$75' in module `\bsw_acc': merged $dff to cell.
Checking cell `$memwr$\pe3_mem$bsw_acc.v:211$76' in module `\bsw_acc': merged $dff to cell.
Checking cell `$memwr$\pe4_mem$bsw_acc.v:214$77' in module `\bsw_acc': merged $dff to cell.
Checking cell `$memrd$\pe1_mem$bsw_acc.v:223$52' in module `\bsw_acc': no (compatible) $dff found.
Checking cell `$memrd$\pe2_mem$bsw_acc.v:224$53' in module `\bsw_acc': no (compatible) $dff found.
Checking cell `$memrd$\pe3_mem$bsw_acc.v:225$54' in module `\bsw_acc': no (compatible) $dff found.
Checking cell `$memrd$\pe4_mem$bsw_acc.v:226$55' in module `\bsw_acc': no (compatible) $dff found.

6.5.15.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsw_acc..
Finding unused cells or wires in module \pe_top..
Finding unused cells or wires in module \pe_unit..
Finding unused cells or wires in module \shift_reg..
Finding unused cells or wires in module \traceback..
Removed 12 unused cells and 12 unused wires.
<suppressed ~13 debug messages>

6.5.15.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.5.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsw_acc..
Finding unused cells or wires in module \pe_top..
Finding unused cells or wires in module \pe_unit..
Finding unused cells or wires in module \shift_reg..
Finding unused cells or wires in module \traceback..

6.5.15.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\pe1_mem' in module `\bsw_acc':
  $memwr$\pe1_mem$bsw_acc.v:205$74 ($memwr)
  $memrd$\pe1_mem$bsw_acc.v:223$52 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\pe2_mem' in module `\bsw_acc':
  $memwr$\pe2_mem$bsw_acc.v:208$75 ($memwr)
  $memrd$\pe2_mem$bsw_acc.v:224$53 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\pe3_mem' in module `\bsw_acc':
  $memwr$\pe3_mem$bsw_acc.v:211$76 ($memwr)
  $memrd$\pe3_mem$bsw_acc.v:225$54 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\pe4_mem' in module `\bsw_acc':
  $memwr$\pe4_mem$bsw_acc.v:214$77 ($memwr)
  $memrd$\pe4_mem$bsw_acc.v:226$55 ($memrd)

6.5.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsw_acc..
Finding unused cells or wires in module \pe_top..
Finding unused cells or wires in module \pe_unit..
Finding unused cells or wires in module \shift_reg..
Finding unused cells or wires in module \traceback..

6.6. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing bsw_acc.pe1_mem:
  Properties: ports=2 bits=96 rports=1 wports=1 dbits=8 abits=4 words=12
  Checking rule #1 for bram type $__XILINX_RAMB36_SDP (variant 1):
    Bram geometry: abits=9 dbits=72 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_SDP: awaste=500 dwaste=64 bwaste=36768 waste=36768 efficiency=0
    Rule #1 for bram type $__XILINX_RAMB36_SDP (variant 1) rejected: requirement 'min efficiency 5' not met.
  Checking rule #2 for bram type $__XILINX_RAMB18_SDP (variant 1):
    Bram geometry: abits=9 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_SDP: awaste=500 dwaste=28 bwaste=18336 waste=18336 efficiency=0
    Rule #2 for bram type $__XILINX_RAMB18_SDP (variant 1) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=1012 dwaste=28 bwaste=36768 waste=36768 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 1) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=2036 dwaste=10 bwaste=36768 waste=36768 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 2) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=4084 dwaste=1 bwaste=36768 waste=36768 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 3) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=8180 dwaste=0 bwaste=32720 waste=32720 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 4) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=16372 dwaste=0 bwaste=32744 waste=32744 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 5) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=32756 dwaste=0 bwaste=32756 waste=32756 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 6) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 1):
    Bram geometry: abits=10 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=1012 dwaste=10 bwaste=18336 waste=18336 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 1) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 2):
    Bram geometry: abits=11 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=2036 dwaste=1 bwaste=18336 waste=18336 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 2) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 3):
    Bram geometry: abits=12 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=4084 dwaste=0 bwaste=16336 waste=16336 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 3) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 4):
    Bram geometry: abits=13 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=8180 dwaste=0 bwaste=16360 waste=16360 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 4) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 5):
    Bram geometry: abits=14 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=16372 dwaste=0 bwaste=16372 waste=16372 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 5) rejected: requirement 'min efficiency 5' not met.
  No acceptable bram resources found.
Processing bsw_acc.pe2_mem:
  Properties: ports=2 bits=96 rports=1 wports=1 dbits=8 abits=4 words=12
  Checking rule #1 for bram type $__XILINX_RAMB36_SDP (variant 1):
    Bram geometry: abits=9 dbits=72 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_SDP: awaste=500 dwaste=64 bwaste=36768 waste=36768 efficiency=0
    Rule #1 for bram type $__XILINX_RAMB36_SDP (variant 1) rejected: requirement 'min efficiency 5' not met.
  Checking rule #2 for bram type $__XILINX_RAMB18_SDP (variant 1):
    Bram geometry: abits=9 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_SDP: awaste=500 dwaste=28 bwaste=18336 waste=18336 efficiency=0
    Rule #2 for bram type $__XILINX_RAMB18_SDP (variant 1) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=1012 dwaste=28 bwaste=36768 waste=36768 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 1) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=2036 dwaste=10 bwaste=36768 waste=36768 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 2) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=4084 dwaste=1 bwaste=36768 waste=36768 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 3) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=8180 dwaste=0 bwaste=32720 waste=32720 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 4) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=16372 dwaste=0 bwaste=32744 waste=32744 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 5) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=32756 dwaste=0 bwaste=32756 waste=32756 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 6) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 1):
    Bram geometry: abits=10 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=1012 dwaste=10 bwaste=18336 waste=18336 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 1) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 2):
    Bram geometry: abits=11 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=2036 dwaste=1 bwaste=18336 waste=18336 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 2) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 3):
    Bram geometry: abits=12 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=4084 dwaste=0 bwaste=16336 waste=16336 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 3) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 4):
    Bram geometry: abits=13 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=8180 dwaste=0 bwaste=16360 waste=16360 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 4) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 5):
    Bram geometry: abits=14 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=16372 dwaste=0 bwaste=16372 waste=16372 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 5) rejected: requirement 'min efficiency 5' not met.
  No acceptable bram resources found.
Processing bsw_acc.pe3_mem:
  Properties: ports=2 bits=96 rports=1 wports=1 dbits=8 abits=4 words=12
  Checking rule #1 for bram type $__XILINX_RAMB36_SDP (variant 1):
    Bram geometry: abits=9 dbits=72 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_SDP: awaste=500 dwaste=64 bwaste=36768 waste=36768 efficiency=0
    Rule #1 for bram type $__XILINX_RAMB36_SDP (variant 1) rejected: requirement 'min efficiency 5' not met.
  Checking rule #2 for bram type $__XILINX_RAMB18_SDP (variant 1):
    Bram geometry: abits=9 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_SDP: awaste=500 dwaste=28 bwaste=18336 waste=18336 efficiency=0
    Rule #2 for bram type $__XILINX_RAMB18_SDP (variant 1) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=1012 dwaste=28 bwaste=36768 waste=36768 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 1) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=2036 dwaste=10 bwaste=36768 waste=36768 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 2) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=4084 dwaste=1 bwaste=36768 waste=36768 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 3) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=8180 dwaste=0 bwaste=32720 waste=32720 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 4) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=16372 dwaste=0 bwaste=32744 waste=32744 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 5) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=32756 dwaste=0 bwaste=32756 waste=32756 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 6) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 1):
    Bram geometry: abits=10 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=1012 dwaste=10 bwaste=18336 waste=18336 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 1) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 2):
    Bram geometry: abits=11 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=2036 dwaste=1 bwaste=18336 waste=18336 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 2) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 3):
    Bram geometry: abits=12 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=4084 dwaste=0 bwaste=16336 waste=16336 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 3) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 4):
    Bram geometry: abits=13 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=8180 dwaste=0 bwaste=16360 waste=16360 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 4) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 5):
    Bram geometry: abits=14 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=16372 dwaste=0 bwaste=16372 waste=16372 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 5) rejected: requirement 'min efficiency 5' not met.
  No acceptable bram resources found.
Processing bsw_acc.pe4_mem:
  Properties: ports=2 bits=96 rports=1 wports=1 dbits=8 abits=4 words=12
  Checking rule #1 for bram type $__XILINX_RAMB36_SDP (variant 1):
    Bram geometry: abits=9 dbits=72 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_SDP: awaste=500 dwaste=64 bwaste=36768 waste=36768 efficiency=0
    Rule #1 for bram type $__XILINX_RAMB36_SDP (variant 1) rejected: requirement 'min efficiency 5' not met.
  Checking rule #2 for bram type $__XILINX_RAMB18_SDP (variant 1):
    Bram geometry: abits=9 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_SDP: awaste=500 dwaste=28 bwaste=18336 waste=18336 efficiency=0
    Rule #2 for bram type $__XILINX_RAMB18_SDP (variant 1) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=1012 dwaste=28 bwaste=36768 waste=36768 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 1) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=2036 dwaste=10 bwaste=36768 waste=36768 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 2) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=4084 dwaste=1 bwaste=36768 waste=36768 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 3) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=8180 dwaste=0 bwaste=32720 waste=32720 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 4) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=16372 dwaste=0 bwaste=32744 waste=32744 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 5) rejected: requirement 'min efficiency 5' not met.
  Checking rule #3 for bram type $__XILINX_RAMB36_TDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB36_TDP: awaste=32756 dwaste=0 bwaste=32756 waste=32756 efficiency=0
    Rule #3 for bram type $__XILINX_RAMB36_TDP (variant 6) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 1):
    Bram geometry: abits=10 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=1012 dwaste=10 bwaste=18336 waste=18336 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 1) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 2):
    Bram geometry: abits=11 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=2036 dwaste=1 bwaste=18336 waste=18336 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 2) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 3):
    Bram geometry: abits=12 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=4084 dwaste=0 bwaste=16336 waste=16336 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 3) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 4):
    Bram geometry: abits=13 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=8180 dwaste=0 bwaste=16360 waste=16360 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 4) rejected: requirement 'min efficiency 5' not met.
  Checking rule #4 for bram type $__XILINX_RAMB18_TDP (variant 5):
    Bram geometry: abits=14 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAMB18_TDP: awaste=16372 dwaste=0 bwaste=16372 waste=16372 efficiency=0
    Rule #4 for bram type $__XILINX_RAMB18_TDP (variant 5) rejected: requirement 'min efficiency 5' not met.
  No acceptable bram resources found.

6.7. Executing TECHMAP pass (map to technology primitives).

6.7.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__XILINX_RAMB36_SDP'.
Generating RTLIL representation for module `\$__XILINX_RAMB18_SDP'.
Generating RTLIL representation for module `\$__XILINX_RAMB36_TDP'.
Generating RTLIL representation for module `\$__XILINX_RAMB18_TDP'.
Successfully finished Verilog frontend.

6.7.2. Continuing TECHMAP pass.
No more expansions possible.

6.8. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing bsw_acc.pe1_mem:
  Properties: ports=2 bits=96 rports=1 wports=1 dbits=8 abits=4 words=12
  Checking rule #1 for bram type $__XILINX_RAM32X1D (variant 1):
    Bram geometry: abits=5 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAM32X1D: awaste=20 dwaste=0 bwaste=20 waste=20 efficiency=37
    Rule #1 for bram type $__XILINX_RAM32X1D (variant 1) accepted.
    Mapping to bram type $__XILINX_RAM32X1D (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=20 efficiency=37
      Storing for later selection.
  Checking rule #2 for bram type $__XILINX_RAM64X1D (variant 1):
    Bram geometry: abits=6 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAM64X1D: awaste=52 dwaste=0 bwaste=52 waste=52 efficiency=18
    Rule #2 for bram type $__XILINX_RAM64X1D (variant 1) accepted.
    Mapping to bram type $__XILINX_RAM64X1D (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=52 efficiency=18
      Storing for later selection.
  Checking rule #3 for bram type $__XILINX_RAM128X1D (variant 1):
    Bram geometry: abits=7 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAM128X1D: awaste=116 dwaste=0 bwaste=116 waste=116 efficiency=9
    Rule #3 for bram type $__XILINX_RAM128X1D (variant 1) accepted.
    Mapping to bram type $__XILINX_RAM128X1D (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=116 efficiency=9
      Storing for later selection.
  Selecting best of 3 rules:
    Efficiency for rule 3.1: efficiency=9, cells=8, acells=1
    Efficiency for rule 2.1: efficiency=18, cells=8, acells=1
    Efficiency for rule 1.1: efficiency=37, cells=8, acells=1
    Selected rule 1.1 with efficiency 37.
    Mapping to bram type $__XILINX_RAM32X1D (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Mapped to bram port A1.1.
      Creating $__XILINX_RAM32X1D cell at grid position <0 0 0>: pe1_mem.0.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <1 0 0>: pe1_mem.1.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <2 0 0>: pe1_mem.2.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <3 0 0>: pe1_mem.3.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <4 0 0>: pe1_mem.4.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <5 0 0>: pe1_mem.5.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <6 0 0>: pe1_mem.6.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <7 0 0>: pe1_mem.7.0.0
Processing bsw_acc.pe2_mem:
  Properties: ports=2 bits=96 rports=1 wports=1 dbits=8 abits=4 words=12
  Checking rule #1 for bram type $__XILINX_RAM32X1D (variant 1):
    Bram geometry: abits=5 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAM32X1D: awaste=20 dwaste=0 bwaste=20 waste=20 efficiency=37
    Rule #1 for bram type $__XILINX_RAM32X1D (variant 1) accepted.
    Mapping to bram type $__XILINX_RAM32X1D (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=20 efficiency=37
      Storing for later selection.
  Checking rule #2 for bram type $__XILINX_RAM64X1D (variant 1):
    Bram geometry: abits=6 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAM64X1D: awaste=52 dwaste=0 bwaste=52 waste=52 efficiency=18
    Rule #2 for bram type $__XILINX_RAM64X1D (variant 1) accepted.
    Mapping to bram type $__XILINX_RAM64X1D (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=52 efficiency=18
      Storing for later selection.
  Checking rule #3 for bram type $__XILINX_RAM128X1D (variant 1):
    Bram geometry: abits=7 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAM128X1D: awaste=116 dwaste=0 bwaste=116 waste=116 efficiency=9
    Rule #3 for bram type $__XILINX_RAM128X1D (variant 1) accepted.
    Mapping to bram type $__XILINX_RAM128X1D (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=116 efficiency=9
      Storing for later selection.
  Selecting best of 3 rules:
    Efficiency for rule 3.1: efficiency=9, cells=8, acells=1
    Efficiency for rule 2.1: efficiency=18, cells=8, acells=1
    Efficiency for rule 1.1: efficiency=37, cells=8, acells=1
    Selected rule 1.1 with efficiency 37.
    Mapping to bram type $__XILINX_RAM32X1D (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Mapped to bram port A1.1.
      Creating $__XILINX_RAM32X1D cell at grid position <0 0 0>: pe2_mem.0.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <1 0 0>: pe2_mem.1.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <2 0 0>: pe2_mem.2.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <3 0 0>: pe2_mem.3.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <4 0 0>: pe2_mem.4.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <5 0 0>: pe2_mem.5.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <6 0 0>: pe2_mem.6.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <7 0 0>: pe2_mem.7.0.0
Processing bsw_acc.pe3_mem:
  Properties: ports=2 bits=96 rports=1 wports=1 dbits=8 abits=4 words=12
  Checking rule #1 for bram type $__XILINX_RAM32X1D (variant 1):
    Bram geometry: abits=5 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAM32X1D: awaste=20 dwaste=0 bwaste=20 waste=20 efficiency=37
    Rule #1 for bram type $__XILINX_RAM32X1D (variant 1) accepted.
    Mapping to bram type $__XILINX_RAM32X1D (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=20 efficiency=37
      Storing for later selection.
  Checking rule #2 for bram type $__XILINX_RAM64X1D (variant 1):
    Bram geometry: abits=6 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAM64X1D: awaste=52 dwaste=0 bwaste=52 waste=52 efficiency=18
    Rule #2 for bram type $__XILINX_RAM64X1D (variant 1) accepted.
    Mapping to bram type $__XILINX_RAM64X1D (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=52 efficiency=18
      Storing for later selection.
  Checking rule #3 for bram type $__XILINX_RAM128X1D (variant 1):
    Bram geometry: abits=7 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAM128X1D: awaste=116 dwaste=0 bwaste=116 waste=116 efficiency=9
    Rule #3 for bram type $__XILINX_RAM128X1D (variant 1) accepted.
    Mapping to bram type $__XILINX_RAM128X1D (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=116 efficiency=9
      Storing for later selection.
  Selecting best of 3 rules:
    Efficiency for rule 3.1: efficiency=9, cells=8, acells=1
    Efficiency for rule 2.1: efficiency=18, cells=8, acells=1
    Efficiency for rule 1.1: efficiency=37, cells=8, acells=1
    Selected rule 1.1 with efficiency 37.
    Mapping to bram type $__XILINX_RAM32X1D (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Mapped to bram port A1.1.
      Creating $__XILINX_RAM32X1D cell at grid position <0 0 0>: pe3_mem.0.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <1 0 0>: pe3_mem.1.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <2 0 0>: pe3_mem.2.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <3 0 0>: pe3_mem.3.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <4 0 0>: pe3_mem.4.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <5 0 0>: pe3_mem.5.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <6 0 0>: pe3_mem.6.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <7 0 0>: pe3_mem.7.0.0
Processing bsw_acc.pe4_mem:
  Properties: ports=2 bits=96 rports=1 wports=1 dbits=8 abits=4 words=12
  Checking rule #1 for bram type $__XILINX_RAM32X1D (variant 1):
    Bram geometry: abits=5 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAM32X1D: awaste=20 dwaste=0 bwaste=20 waste=20 efficiency=37
    Rule #1 for bram type $__XILINX_RAM32X1D (variant 1) accepted.
    Mapping to bram type $__XILINX_RAM32X1D (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=20 efficiency=37
      Storing for later selection.
  Checking rule #2 for bram type $__XILINX_RAM64X1D (variant 1):
    Bram geometry: abits=6 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAM64X1D: awaste=52 dwaste=0 bwaste=52 waste=52 efficiency=18
    Rule #2 for bram type $__XILINX_RAM64X1D (variant 1) accepted.
    Mapping to bram type $__XILINX_RAM64X1D (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=52 efficiency=18
      Storing for later selection.
  Checking rule #3 for bram type $__XILINX_RAM128X1D (variant 1):
    Bram geometry: abits=7 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__XILINX_RAM128X1D: awaste=116 dwaste=0 bwaste=116 waste=116 efficiency=9
    Rule #3 for bram type $__XILINX_RAM128X1D (variant 1) accepted.
    Mapping to bram type $__XILINX_RAM128X1D (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=116 efficiency=9
      Storing for later selection.
  Selecting best of 3 rules:
    Efficiency for rule 3.1: efficiency=9, cells=8, acells=1
    Efficiency for rule 2.1: efficiency=18, cells=8, acells=1
    Efficiency for rule 1.1: efficiency=37, cells=8, acells=1
    Selected rule 1.1 with efficiency 37.
    Mapping to bram type $__XILINX_RAM32X1D (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Mapped to bram port A1.1.
      Creating $__XILINX_RAM32X1D cell at grid position <0 0 0>: pe4_mem.0.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <1 0 0>: pe4_mem.1.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <2 0 0>: pe4_mem.2.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <3 0 0>: pe4_mem.3.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <4 0 0>: pe4_mem.4.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <5 0 0>: pe4_mem.5.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <6 0 0>: pe4_mem.6.0.0
      Creating $__XILINX_RAM32X1D cell at grid position <7 0 0>: pe4_mem.7.0.0

6.9. Executing TECHMAP pass (map to technology primitives).

6.9.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/drams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/drams_map.v' to AST representation.
Generating RTLIL representation for module `\$__XILINX_RAM32X1D'.
Generating RTLIL representation for module `\$__XILINX_RAM64X1D'.
Generating RTLIL representation for module `\$__XILINX_RAM128X1D'.
Successfully finished Verilog frontend.

6.9.2. Continuing TECHMAP pass.
Using template $paramod\$__XILINX_RAM32X1D\CLKPOL2=1 for cells of type $__XILINX_RAM32X1D.
No more expansions possible.
<suppressed ~42 debug messages>

6.10. Executing PMUX2SHIFTX pass.
Inspecting $pmux cell bsw_acc/$procmux$3701.
  data width: 8 (next power-of-2 = 8, log2 = 3)
  checking ctrl signal \req_pe_id
    best permutation: \req_pe_id
    best xor mask: 2'00
      0: 2'11 -> 2'11 -> 2'11: $memrd$\pe4_mem$bsw_acc.v:226$55_DATA
      1: 2'10 -> 2'10 -> 2'10: $memrd$\pe3_mem$bsw_acc.v:225$54_DATA
      2: 2'01 -> 2'01 -> 2'01: $memrd$\pe2_mem$bsw_acc.v:224$53_DATA
      3: 2'00 -> 2'00 -> 2'00: $memrd$\pe1_mem$bsw_acc.v:223$52_DATA
    choices: 4
    min choice: 0
    max choice: 3
    range density: 100%
    absolute density: 100%
    full density: 100%
    update to full case.
    new min choice: 0
    new max choice: 3
    full case: true
    created $shiftx cell $auto$pmux2shiftx.cc:720:execute$4468.

6.11. Executing OPT pass (performing simple optimizations).

6.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsw_acc.
<suppressed ~30 debug messages>
Optimizing module pe_top.
<suppressed ~14 debug messages>
Optimizing module pe_unit.
Optimizing module shift_reg.
Optimizing module traceback.
<suppressed ~7 debug messages>

6.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsw_acc'.
Finding identical cells in module `\pe_top'.
Finding identical cells in module `\pe_unit'.
Finding identical cells in module `\shift_reg'.
Finding identical cells in module `\traceback'.
Removed a total of 0 cells.

6.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

6.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsw_acc..
Finding unused cells or wires in module \pe_top..
Finding unused cells or wires in module \pe_unit..
Finding unused cells or wires in module \shift_reg..
Finding unused cells or wires in module \traceback..
Removed 4 unused cells and 219 unused wires.
<suppressed ~7 debug messages>

6.11.5. Finished fast OPT passes.

6.12. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

6.13. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

6.14. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Transforming FF to FF+Enable cells in module bsw_acc:
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4481 for $0\Q_aligned[29:0] [14] -> \Q_aligned [14].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4488 for $0\Q_aligned[29:0] [13] -> \Q_aligned [13].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4495 for $0\Q_aligned[29:0] [12] -> \Q_aligned [12].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4502 for $0\Q_aligned[29:0] [11] -> \Q_aligned [11].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4509 for $0\Q_aligned[29:0] [10] -> \Q_aligned [10].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4516 for $0\Q_aligned[29:0] [9] -> \Q_aligned [9].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4523 for $0\Q_aligned[29:0] [8] -> \Q_aligned [8].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4530 for $0\Q_aligned[29:0] [7] -> \Q_aligned [7].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4537 for $0\Q_aligned[29:0] [6] -> \Q_aligned [6].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4544 for $0\Q_aligned[29:0] [5] -> \Q_aligned [5].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4551 for $0\Q_aligned[29:0] [4] -> \Q_aligned [4].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4558 for $0\Q_aligned[29:0] [3] -> \Q_aligned [3].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4565 for $0\Q_aligned[29:0] [2] -> \Q_aligned [2].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4572 for $0\Q_aligned[29:0] [1] -> \Q_aligned [1].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4579 for $0\Q_aligned[29:0] [0] -> \Q_aligned [0].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4586 for $0\Q_aligned[29:0] [28] -> \Q_aligned [28].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4593 for $0\Q_aligned[29:0] [27] -> \Q_aligned [27].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4600 for $0\Q_aligned[29:0] [26] -> \Q_aligned [26].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4607 for $0\Q_aligned[29:0] [25] -> \Q_aligned [25].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4614 for $0\Q_aligned[29:0] [24] -> \Q_aligned [24].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4621 for $0\Q_aligned[29:0] [23] -> \Q_aligned [23].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4628 for $0\Q_aligned[29:0] [22] -> \Q_aligned [22].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4635 for $0\Q_aligned[29:0] [21] -> \Q_aligned [21].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4642 for $0\Q_aligned[29:0] [20] -> \Q_aligned [20].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4649 for $0\Q_aligned[29:0] [19] -> \Q_aligned [19].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4656 for $0\Q_aligned[29:0] [18] -> \Q_aligned [18].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4663 for $0\Q_aligned[29:0] [17] -> \Q_aligned [17].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4670 for $0\Q_aligned[29:0] [16] -> \Q_aligned [16].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4677 for $0\Q_aligned[29:0] [15] -> \Q_aligned [15].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4684 for $0\Q_aligned[29:0] [29] -> \Q_aligned [29].
  removing now obsolete cell $procdff$3920.
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4691 for $0\R_aligned[29:0] [14] -> \R_aligned [14].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4698 for $0\R_aligned[29:0] [13] -> \R_aligned [13].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4705 for $0\R_aligned[29:0] [12] -> \R_aligned [12].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4712 for $0\R_aligned[29:0] [11] -> \R_aligned [11].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4719 for $0\R_aligned[29:0] [10] -> \R_aligned [10].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4726 for $0\R_aligned[29:0] [9] -> \R_aligned [9].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4733 for $0\R_aligned[29:0] [8] -> \R_aligned [8].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4740 for $0\R_aligned[29:0] [7] -> \R_aligned [7].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4747 for $0\R_aligned[29:0] [6] -> \R_aligned [6].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4754 for $0\R_aligned[29:0] [5] -> \R_aligned [5].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4761 for $0\R_aligned[29:0] [4] -> \R_aligned [4].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4768 for $0\R_aligned[29:0] [3] -> \R_aligned [3].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4775 for $0\R_aligned[29:0] [2] -> \R_aligned [2].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4782 for $0\R_aligned[29:0] [1] -> \R_aligned [1].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4789 for $0\R_aligned[29:0] [0] -> \R_aligned [0].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4796 for $0\R_aligned[29:0] [28] -> \R_aligned [28].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4803 for $0\R_aligned[29:0] [27] -> \R_aligned [27].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4810 for $0\R_aligned[29:0] [26] -> \R_aligned [26].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4817 for $0\R_aligned[29:0] [25] -> \R_aligned [25].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4824 for $0\R_aligned[29:0] [24] -> \R_aligned [24].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4831 for $0\R_aligned[29:0] [23] -> \R_aligned [23].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4838 for $0\R_aligned[29:0] [22] -> \R_aligned [22].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4845 for $0\R_aligned[29:0] [21] -> \R_aligned [21].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4852 for $0\R_aligned[29:0] [20] -> \R_aligned [20].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4859 for $0\R_aligned[29:0] [19] -> \R_aligned [19].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4866 for $0\R_aligned[29:0] [18] -> \R_aligned [18].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4873 for $0\R_aligned[29:0] [17] -> \R_aligned [17].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4880 for $0\R_aligned[29:0] [16] -> \R_aligned [16].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4887 for $0\R_aligned[29:0] [15] -> \R_aligned [15].
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4894 for $0\R_aligned[29:0] [29] -> \R_aligned [29].
  removing now obsolete cell $procdff$3921.
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4901 for $0\count1[7:0] -> \count1.
  removing now obsolete cell $procdff$3941.
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4910 for $0\count2[4:0] -> \count2.
  removing now obsolete cell $procdff$3942.
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4919 for $0\count3[4:0] -> \count3.
  removing now obsolete cell $procdff$3943.
Transforming FF to FF+Enable cells in module pe_top:
Transforming FF to FF+Enable cells in module pe_unit:
Transforming FF to FF+Enable cells in module shift_reg:
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4922 for $0\out[11:0] -> \out.
  removing now obsolete cell $procdff$3917.
Transforming FF to FF+Enable cells in module traceback:
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4925 for $0\pe_id[1:0] -> \pe_id.
  removing now obsolete cell $procdff$3910.
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4928 for $0\addr[7:0] -> \addr.
  removing now obsolete cell $procdff$3911.
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4931 for $0\q_ctr[2:0] -> \q_ctr.
  removing now obsolete cell $procdff$3915.
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$4934 for $0\r_ctr[2:0] -> \r_ctr.
  removing now obsolete cell $procdff$3916.

6.15. Executing OPT pass (performing simple optimizations).

6.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsw_acc.
<suppressed ~194 debug messages>
Optimizing module pe_top.
Optimizing module pe_unit.
Optimizing module shift_reg.
<suppressed ~2 debug messages>
Optimizing module traceback.
<suppressed ~4 debug messages>

6.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsw_acc'.
<suppressed ~186 debug messages>
Finding identical cells in module `\pe_top'.
Finding identical cells in module `\pe_unit'.
Finding identical cells in module `\shift_reg'.
Finding identical cells in module `\traceback'.
Removed a total of 62 cells.

6.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \bsw_acc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pe_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pe_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shift_reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \traceback..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~103 debug messages>

6.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \bsw_acc.
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4508: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4505 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4578: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4575 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4522: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4519 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4480: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4687 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4487: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4694 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4620: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4617 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4641: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4638 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4648: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4855 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4662: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4659 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4606: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4603 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4669: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4666 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4676: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4883 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4893: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4890 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4494: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4491 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4909: { $auto$dff2dffe.cc:158:make_patterns_logic$4902 $auto$dff2dffe.cc:158:make_patterns_logic$4913 $auto$dff2dffe.cc:158:make_patterns_logic$4906 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4550: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4547 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4592: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4589 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4725: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4512 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4739: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4526 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4900: { $auto$dff2dffe.cc:158:make_patterns_logic$4895 $auto$dff2dffe.cc:158:make_patterns_logic$4915 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4746: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4533 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4753: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4540 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4613: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4610 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4767: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4554 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4837: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4624 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4501: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4498 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4564: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4561 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4795: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4582 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4809: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4806 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4571: { $logic_and$bsw_acc.v:244$62_Y $auto$dff2dffe.cc:158:make_patterns_logic$4568 }
  Optimizing cells in module \bsw_acc.
  Optimizing cells in module \pe_top.
    Consolidated identical input bits for $mux cell $procmux$335:
      Old ports: A=3'010, B=3'110, Y=$2\pos2[2:0]
      New ports: A=1'0, B=1'1, Y=$2\pos2[2:0] [2]
      New connections: $2\pos2[2:0] [1:0] = 2'10
    Consolidated identical input bits for $mux cell $procmux$342:
      Old ports: A=3'001, B=3'101, Y=$2\pos1[2:0]
      New ports: A=1'0, B=1'1, Y=$2\pos1[2:0] [2]
      New connections: $2\pos1[2:0] [1:0] = 2'01
    Consolidated identical input bits for $pmux cell $procmux$427:
      Old ports: A=3'111, B=6'100011, Y=\pos3
      New ports: A=2'11, B=4'1001, Y={ \pos3 [2] \pos3 [0] }
      New connections: \pos3 [1] = \pos3 [0]
    Consolidated identical input bits for $mux cell $procmux$507:
      Old ports: A=2'00, B=2'11, Y=$3\region[1:0]
      New ports: A=1'0, B=1'1, Y=$3\region[1:0] [0]
      New connections: $3\region[1:0] [1] = $3\region[1:0] [0]
  Optimizing cells in module \pe_top.
    Consolidated identical input bits for $pmux cell $procmux$432:
      Old ports: A=3'111, B={ $2\pos2[2:0] 3'010 }, Y=\pos2
      New ports: A=2'11, B={ $2\pos2[2:0] [2] 3'000 }, Y={ \pos2 [2] \pos2 [0] }
      New connections: \pos2 [1] = 1'1
    Consolidated identical input bits for $pmux cell $procmux$437:
      Old ports: A=3'111, B={ $2\pos1[2:0] 3'001 }, Y=\pos1
      New ports: A=2'11, B={ $2\pos1[2:0] [2] 3'000 }, Y=\pos1 [2:1]
      New connections: \pos1 [0] = 1'1
  Optimizing cells in module \pe_top.
  Optimizing cells in module \pe_unit.
    Consolidated identical input bits for $mux cell $ternary$pe_unit.v:38$102:
      Old ports: A=8'11111111, B=8'00000010, Y=$auto$wreduce.cc:455:run$4005 [7:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$4005 [0]
      New connections: $auto$wreduce.cc:455:run$4005 [7:1] = { $auto$wreduce.cc:455:run$4005 [0] $auto$wreduce.cc:455:run$4005 [0] $auto$wreduce.cc:455:run$4005 [0] $auto$wreduce.cc:455:run$4005 [0] $auto$wreduce.cc:455:run$4005 [0] $auto$wreduce.cc:455:run$4005 [0] 1'1 }
  Optimizing cells in module \pe_unit.
  Optimizing cells in module \shift_reg.
  Optimizing cells in module \traceback.
Performed a total of 37 changes.

6.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsw_acc'.
Finding identical cells in module `\pe_top'.
<suppressed ~6 debug messages>
Finding identical cells in module `\pe_unit'.
Finding identical cells in module `\shift_reg'.
Finding identical cells in module `\traceback'.
Removed a total of 2 cells.

6.15.6. Executing OPT_RMDFF pass (remove dff with constant values).

6.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsw_acc..
Finding unused cells or wires in module \pe_top..
Finding unused cells or wires in module \pe_unit..
Finding unused cells or wires in module \shift_reg..
Finding unused cells or wires in module \traceback..
Removed 0 unused cells and 259 unused wires.
<suppressed ~4 debug messages>

6.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsw_acc.
Optimizing module pe_top.
<suppressed ~2 debug messages>
Optimizing module pe_unit.
<suppressed ~1 debug messages>
Optimizing module shift_reg.
Optimizing module traceback.

6.15.9. Rerunning OPT passes. (Maybe there is more to do..)

6.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \bsw_acc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pe_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pe_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shift_reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \traceback..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~101 debug messages>

6.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \bsw_acc.
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4918: { $auto$dff2dffe.cc:158:make_patterns_logic$4897 $auto$dff2dffe.cc:158:make_patterns_logic$4911 $auto$dff2dffe.cc:158:make_patterns_logic$4904 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4909: { $auto$dff2dffe.cc:158:make_patterns_logic$4902 $auto$dff2dffe.cc:158:make_patterns_logic$4906 $auto$dff2dffe.cc:158:make_patterns_logic$4904 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4900: { $auto$dff2dffe.cc:158:make_patterns_logic$4897 $auto$dff2dffe.cc:158:make_patterns_logic$4895 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4893: { $auto$dff2dffe.cc:158:make_patterns_logic$4680 $auto$dff2dffe.cc:158:make_patterns_logic$4475 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4767: { $auto$dff2dffe.cc:158:make_patterns_logic$4554 $auto$dff2dffe.cc:158:make_patterns_logic$4475 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4676: { $auto$dff2dffe.cc:158:make_patterns_logic$4673 $auto$dff2dffe.cc:158:make_patterns_logic$4475 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4669: { $auto$dff2dffe.cc:158:make_patterns_logic$4666 $auto$dff2dffe.cc:158:make_patterns_logic$4475 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4662: { $auto$dff2dffe.cc:158:make_patterns_logic$4659 $auto$dff2dffe.cc:158:make_patterns_logic$4475 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4648: { $auto$dff2dffe.cc:158:make_patterns_logic$4645 $auto$dff2dffe.cc:158:make_patterns_logic$4475 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4641: { $auto$dff2dffe.cc:158:make_patterns_logic$4638 $auto$dff2dffe.cc:158:make_patterns_logic$4475 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4550: { $auto$dff2dffe.cc:158:make_patterns_logic$4547 $auto$dff2dffe.cc:158:make_patterns_logic$4475 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4487: { $auto$dff2dffe.cc:158:make_patterns_logic$4484 $auto$dff2dffe.cc:158:make_patterns_logic$4475 }
    New input vector for $reduce_and cell $auto$dff2dffe.cc:176:make_patterns_logic$4480: { $auto$dff2dffe.cc:158:make_patterns_logic$4477 $auto$dff2dffe.cc:158:make_patterns_logic$4475 }
  Optimizing cells in module \bsw_acc.
  Optimizing cells in module \pe_top.
  Optimizing cells in module \pe_unit.
  Optimizing cells in module \shift_reg.
  Optimizing cells in module \traceback.
Performed a total of 13 changes.

6.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsw_acc'.
Finding identical cells in module `\pe_top'.
Finding identical cells in module `\pe_unit'.
Finding identical cells in module `\shift_reg'.
Finding identical cells in module `\traceback'.
Removed a total of 0 cells.

6.15.13. Executing OPT_RMDFF pass (remove dff with constant values).

6.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsw_acc..
Finding unused cells or wires in module \pe_top..
Finding unused cells or wires in module \pe_unit..
Finding unused cells or wires in module \shift_reg..
Finding unused cells or wires in module \traceback..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

6.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsw_acc.
Optimizing module pe_top.
Optimizing module pe_unit.
Optimizing module shift_reg.
Optimizing module traceback.

6.15.16. Rerunning OPT passes. (Maybe there is more to do..)

6.15.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \bsw_acc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pe_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pe_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shift_reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \traceback..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~101 debug messages>

6.15.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \bsw_acc.
  Optimizing cells in module \pe_top.
  Optimizing cells in module \pe_unit.
  Optimizing cells in module \shift_reg.
  Optimizing cells in module \traceback.
Performed a total of 0 changes.

6.15.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsw_acc'.
Finding identical cells in module `\pe_top'.
Finding identical cells in module `\pe_unit'.
Finding identical cells in module `\shift_reg'.
Finding identical cells in module `\traceback'.
Removed a total of 0 cells.

6.15.20. Executing OPT_RMDFF pass (remove dff with constant values).

6.15.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsw_acc..
Finding unused cells or wires in module \pe_top..
Finding unused cells or wires in module \pe_unit..
Finding unused cells or wires in module \shift_reg..
Finding unused cells or wires in module \traceback..

6.15.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsw_acc.
Optimizing module pe_top.
Optimizing module pe_unit.
Optimizing module shift_reg.
Optimizing module traceback.

6.15.23. Finished OPT passes. (There is nothing left to do.)

6.16. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4481 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4488 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4495 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4502 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4509 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4516 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4523 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4530 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4537 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4544 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4551 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4558 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4565 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4572 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4579 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4586 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4593 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4600 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4607 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4614 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4621 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4628 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4635 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4642 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4649 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4656 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4663 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4670 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4677 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4684 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4691 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4698 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4705 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4712 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4719 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4726 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4733 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4740 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4747 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4754 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4761 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4768 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4775 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4782 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4789 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4796 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4803 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4810 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4817 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4824 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4831 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4838 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4845 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4852 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4859 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4866 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4873 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4880 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4887 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4894 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4901 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4910 ($dffe).
Mapping bsw_acc.$auto$dff2dffe.cc:215:handle_dff_cell$4919 ($dffe).
Mapping bsw_acc.$procdff$3922 ($dff).
Mapping bsw_acc.$procdff$3923 ($dff).
Mapping bsw_acc.$procdff$3936 ($dff).
Mapping bsw_acc.$procdff$3937 ($dff).
Mapping bsw_acc.$procdff$3938 ($dff).
Mapping bsw_acc.$procdff$3939 ($dff).
Mapping bsw_acc.$procdff$3940 ($dff).
Mapping bsw_acc.$procdff$3944 ($dff).
Mapping pe_unit.$procdff$3918 ($dff).
Mapping pe_unit.$procdff$3919 ($dff).
Mapping shift_reg.$auto$dff2dffe.cc:215:handle_dff_cell$4922 ($dffe).
Mapping traceback.$auto$dff2dffe.cc:215:handle_dff_cell$4925 ($dffe).
Mapping traceback.$auto$dff2dffe.cc:215:handle_dff_cell$4928 ($dffe).
Mapping traceback.$auto$dff2dffe.cc:215:handle_dff_cell$4931 ($dffe).
Mapping traceback.$auto$dff2dffe.cc:215:handle_dff_cell$4934 ($dffe).
Mapping traceback.$procdff$3909 ($dff).
Mapping traceback.$procdff$3912 ($dff).
Mapping traceback.$procdff$3913 ($dff).
Mapping traceback.$procdff$3914 ($dff).

6.17. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

6.18. Executing TECHMAP pass (map to technology primitives).

6.18.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.18.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_xilinx_lcu'.
Generating RTLIL representation for module `\_80_xilinx_alu'.
Successfully finished Verilog frontend.

6.18.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$715501484fdb0762e21dadf538e5d80c300e9c52\_80_xilinx_alu for cells of type $alu.
Using template $paramod$4fd16bdea0adf6b62041c948f894e0d2409e3080\_80_xilinx_alu for cells of type $alu.
Using template $paramod$07557ecb985cbf869c2dbbe3f1526471bebe4edd\_80_xilinx_alu for cells of type $alu.
Using template $paramod$4ebef2158ddbd28429f8ca52664e6f1662068bc0\_80_xilinx_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$b575dfec78a01450f78611dce0d6ba11097231ca\_80_xilinx_alu for cells of type $alu.
Using template $paramod$c8f01fc250a4ad34f1cd1c6c806330000fdb30d6\_80_xilinx_alu for cells of type $alu.
Using template $paramod$238f84aaa031f389b9990b0c9a2b47ca64ca4da0\_80_xilinx_alu for cells of type $alu.
Using template $paramod$86b4f70892a39831f8b1d12a74806725d52e2feb\_80_xilinx_alu for cells of type $alu.
Using template $paramod$c3cdc728f972ea404ee1868954d97bdc10fa0f56\_80_xilinx_alu for cells of type $alu.
Using template $paramod$39fd01b1f437f6d76fd1915888e0c901600fb94b\_80_xilinx_alu for cells of type $alu.
Using template $paramod$7190b18a37d7d657efe6bb2b232957c747b41084\_80_xilinx_alu for cells of type $alu.
Using template $paramod$03ac2ea27c699f98dafecb90250ab7b5c7c49ecd\_80_xilinx_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$constmap:9e94e800dfc896ebbc25e7d1509206b00255f61f$paramod$f9aea3580c818e27d71934dcebc3fa6b614086fd\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:ad62432dc588384ac9e4502cee6ddae521345b24$paramod$616bc737fc20a0b56f184bcda6509db70a8b8664\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=2 for cells of type $pmux.
Using template $paramod$0600ec7f9a580c43cfdf173f21d08c3f4a81b482\_80_xilinx_alu for cells of type $alu.
Using template $paramod$5825cd910c5abc0784290b57c193d6a8a5a4e079\_80_xilinx_alu for cells of type $alu.
Using template $paramod$1e26f070084a6067ce8077fd7008ca19a6e5c406\_80_xilinx_alu for cells of type $alu.
Using template $paramod$8d25e731b149608201b1d4b85483b37755c3faa5\_80_xilinx_alu for cells of type $alu.
Using template $paramod$constmap:eb72640c13e348673f24fef903cf1e0dfd81cbc9$paramod$e4ccb558a534d95b90076a670525786a04e2861c\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$59288b16db0da087ed2d03daf89318552c9facf8\_80_xilinx_alu for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=1\Y_WIDTH=2 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using template $paramod$48c3e8fdcbc3f903959c38a35aab2fcd8d4ca2b4\_80_xilinx_alu for cells of type $alu.
Using template $paramod$d3368cff217cede0a9123460371e8c6e41548268\_80_xilinx_alu for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add $sub$traceback.v:31$123_Y * 2'11 (32x2 bits, unsigned)
  add $sub$traceback.v:30$120_Y * 2'11 (32x2 bits, unsigned)
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
Using template $paramod$bf3b5fab9e093d19bbea16c6516a73d098dbaa75\_80_xilinx_alu for cells of type $alu.
Using template $paramod$6b61520020ae47122bfa7c400ce895b2e088c26f\_80_xilinx_alu for cells of type $alu.
Using template $paramod$2fc4f59566acc201a9a706163851e1aa6ce57496\_80_xilinx_alu for cells of type $alu.
No more expansions possible.
<suppressed ~2324 debug messages>

6.19. Executing OPT pass (performing simple optimizations).

6.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module bsw_acc.
<suppressed ~3542 debug messages>
Optimizing module pe_top.
<suppressed ~231 debug messages>
Optimizing module pe_unit.
<suppressed ~173 debug messages>
Optimizing module shift_reg.
Optimizing module traceback.
<suppressed ~579 debug messages>

6.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bsw_acc'.
<suppressed ~8289 debug messages>
Finding identical cells in module `\pe_top'.
<suppressed ~291 debug messages>
Finding identical cells in module `\pe_unit'.
<suppressed ~93 debug messages>
Finding identical cells in module `\shift_reg'.
Finding identical cells in module `\traceback'.
<suppressed ~120 debug messages>
Removed a total of 2931 cells.

6.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

6.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bsw_acc..
Finding unused cells or wires in module \pe_top..
Finding unused cells or wires in module \pe_unit..
Finding unused cells or wires in module \shift_reg..
Finding unused cells or wires in module \traceback..
Removed 379 unused cells and 1836 unused wires.
<suppressed ~383 debug messages>

6.19.5. Finished fast OPT passes.

6.20. Executing TECHMAP pass (map to technology primitives).

6.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.20.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/cells_map.v' to AST representation.
Generating RTLIL representation for module `\_90_dff_nn0_to_np0'.
Generating RTLIL representation for module `\_90_dff_pn0_to_pp0'.
Generating RTLIL representation for module `\_90_dff_nn1_to_np1'.
Generating RTLIL representation for module `\_90_dff_pn1_to_pp1'.
Generating RTLIL representation for module `\$__SHREG_'.
Generating RTLIL representation for module `\$__XILINX_SHREG_'.
Successfully finished Verilog frontend.

6.20.3. Continuing TECHMAP pass.
No more expansions possible.

6.21. Executing ABC pass (technology mapping using ABC).

6.21.1. Extracting gate netlist of module `\bsw_acc' to `<abc-temp-dir>/input.blif'..
Extracted 1129 gates and 1382 wires to a netlist network with 251 inputs and 191 outputs.

6.21.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: Currently "mfs" cannot process the network containing nodes with more than 6 fanins.
ABC: + write_blif <abc-temp-dir>/output.blif 

6.21.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      872
ABC RESULTS:        internal signals:      940
ABC RESULTS:           input signals:      251
ABC RESULTS:          output signals:      191
Removing temp directory.

6.21.2. Extracting gate netlist of module `\pe_top' to `<abc-temp-dir>/input.blif'..
Extracted 388 gates and 477 wires to a netlist network with 87 inputs and 100 outputs.

6.21.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: Currently "mfs" cannot process the network containing nodes with more than 6 fanins.
ABC: + write_blif <abc-temp-dir>/output.blif 

6.21.2.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      208
ABC RESULTS:        internal signals:      290
ABC RESULTS:           input signals:       87
ABC RESULTS:          output signals:      100
Removing temp directory.

6.21.3. Extracting gate netlist of module `\pe_unit' to `<abc-temp-dir>/input.blif'..
Extracted 222 gates and 313 wires to a netlist network with 89 inputs and 119 outputs.

6.21.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: Currently "mfs" cannot process the network containing nodes with more than 6 fanins.
ABC: + write_blif <abc-temp-dir>/output.blif 

6.21.3.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      308
ABC RESULTS:        internal signals:      105
ABC RESULTS:           input signals:       89
ABC RESULTS:          output signals:      119
Removing temp directory.

6.21.4. Extracting gate netlist of module `\shift_reg' to `<abc-temp-dir>/input.blif'..
Extracted 12 gates and 28 wires to a netlist network with 16 inputs and 12 outputs.

6.21.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.21.4.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       24
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       12
Removing temp directory.

6.21.5. Extracting gate netlist of module `\traceback' to `<abc-temp-dir>/input.blif'..
Extracted 560 gates and 786 wires to a netlist network with 224 inputs and 174 outputs.

6.21.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: Currently "mfs" cannot process the network containing nodes with more than 6 fanins.
ABC: + write_blif <abc-temp-dir>/output.blif 

6.21.5.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      570
ABC RESULTS:        internal signals:      388
ABC RESULTS:           input signals:      224
ABC RESULTS:          output signals:      174
Removing temp directory.
Removed 0 unused cells and 1609 unused wires.

6.22. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

6.23. Executing TECHMAP pass (map to technology primitives).

6.23.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/lut_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

6.23.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/ff_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Successfully finished Verilog frontend.

6.23.3. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/cells_map.v' to AST representation.
Generating RTLIL representation for module `\_90_dff_nn0_to_np0'.
Generating RTLIL representation for module `\_90_dff_pn0_to_pp0'.
Generating RTLIL representation for module `\_90_dff_nn1_to_np1'.
Generating RTLIL representation for module `\_90_dff_pn1_to_pp1'.
Generating RTLIL representation for module `\$__SHREG_'.
Generating RTLIL representation for module `\$__XILINX_SHREG_'.
Successfully finished Verilog frontend.

6.23.4. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template $paramod$7acbcbec354d3a6c5983f6cd8187ca6455579c03\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=16842751 for cells of type $lut.
Using template $paramod$10d7da15d82d0df8cf361a727b8579d8a1cb33e9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110001 for cells of type $lut.
Using template $paramod$418509f3fac22649c1479fe0e852aea1c1c3278c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=65536 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod$50f9efefdd140c60b627a5a25cd4781387cab848\$lut for cells of type $lut.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod$53afc4693cdd4770ebaebeb0ab6c288fde062f75\$lut for cells of type $lut.
Using template $paramod$e10ca4aca4e4c8627be5bb912095a9253494b061\$lut for cells of type $lut.
Using template $paramod$1929d44748517239e36a599c0facfb62ddb99607\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod$b5cd238a527d851ba52055b76f8b8313ff4d0a1d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod$9a14c618c3191b9d01071ee43d7fccf47edf7b97\$lut for cells of type $lut.
Using template $paramod$2b0212295abcfa79b8b86fbd60fcc08b92f00e36\$lut for cells of type $lut.
Using template $paramod$30a432a4c37e828f58c7d0ac37d1c51d933da1a8\$lut for cells of type $lut.
Using template $paramod$f02a290d83083b82fcd353b94af48616cce31213\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11110000000000001000100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=251675716 for cells of type $lut.
Using template $paramod$d7f43a146dc0e8d30726f1daf8e42bb8c76cb153\$lut for cells of type $lut.
Using template $paramod$d534569b4ab7b24e8b770cf7e4dbb3d705fffa40\$lut for cells of type $lut.
Using template $paramod$3a798fd75395207c18f0a0ca83a8aec54e9ea5d0\$lut for cells of type $lut.
Using template $paramod$9629cdd4a1243235849ea8b6126d8824a7dc2f5d\$lut for cells of type $lut.
Using template $paramod$25eca4c2287a57a8d60278b83655e99d0772724d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=987409 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod$e01e7c1d6f0b3fb4e0ce9fb66f56826d925a66c6\$lut for cells of type $lut.
Using template $paramod$b5e48203d43516283ed4f5e894cb9eb3e9649297\$lut for cells of type $lut.
Using template $paramod$471e0e3d877aa94f3842ecbbb79b4051451278fe\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1073741824 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11110000111100001100110010101010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod$764b54c448dc6d3451cf5677e27c53aa9b38192e\$lut for cells of type $lut.
Using template $paramod$4c2f06410de9802710078496fa1472cec2bd4a5b\$lut for cells of type $lut.
Using template $paramod$d3547fb22acdf1c68e76d28e333be3999d852872\$lut for cells of type $lut.
Using template $paramod$81374e7c3b49de4433cc0407d90f24de1e02f950\$lut for cells of type $lut.
Using template $paramod$415a62358290b70884679c86908ca13925457cd5\$lut for cells of type $lut.
Using template $paramod$d5ae3622abca86481135c4a158ec5888abd2d98c\$lut for cells of type $lut.
Using template $paramod$565fef9ede39389b2b1b25f7978d7d34511831b8\$lut for cells of type $lut.
Using template $paramod$9a08f1f132abd9e4c06a5ef625d3935b3e573502\$lut for cells of type $lut.
Using template $paramod$655429164e80c8ccbc4fc52a0d5b9fe23001e613\$lut for cells of type $lut.
Using template $paramod$d7b0ed83c0f977f582d1317f2dec9db04b5ca4d4\$lut for cells of type $lut.
Using template $paramod$b66c71b81c0ae799dfa10a68a708fe32fd5e5a87\$lut for cells of type $lut.
Using template $paramod$dfa26f1b3002c501b1ff42199b2e68aab893cd54\$lut for cells of type $lut.
Using template $paramod$0e9a46023a3c8ac27c0cd93e591938ece56f4275\$lut for cells of type $lut.
Using template $paramod$8a8ff953f6129e122047d149f8c084d3c0ee8047\$lut for cells of type $lut.
Using template $paramod$c80f6f39143ea9c8eaed0b045c5470e8d91a2b04\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=117440512 for cells of type $lut.
Using template $paramod$8c12052987cb74240a0b59bca0eb824f514124ec\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod$0a81c125203cbf3c4faac2c7c1f7688145090ce6\$lut for cells of type $lut.
Using template $paramod$e9db828c4f11354a9664a97af24dbf099e417bff\$lut for cells of type $lut.
Using template $paramod$23481f939b3c262197f0a0cc9e03811e0b932587\$lut for cells of type $lut.
Using template $paramod$47c5c416d9d790be7c3e219a429743cc5a6f844e\$lut for cells of type $lut.
Using template $paramod$208b1f500ee5a76782d9b842e31d008915173695\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=269549328 for cells of type $lut.
Using template $paramod$6c02e95addfaa5514e105c4bb06f1bf82fed99b7\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1056979722 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=202034380 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010011110000 for cells of type $lut.
Using template $paramod$120bbd99479bb406a0803ba91782eb3434a92da2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111110001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11101111111111111111111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101001111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11110100010001000000000000000000 for cells of type $lut.
Using template $paramod$cbaba67256188d3d76c34c1d53148f6754db9979\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod$110ce46ae217c8e0c30afea00ea0443d6c896cfd\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=61439 for cells of type $lut.
Using template $paramod$ccce4f3946ebc1c1bbc18bd1adc9add9d368a18e\$lut for cells of type $lut.
Using template $paramod$62ef5dc5b2ef500636874d4a88611ba8dd139086\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010011 for cells of type $lut.
Using template $paramod$98be3c9d3484e70015a7238d8b7e92bb7b8b7c45\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=65534 for cells of type $lut.
Using template $paramod$66e6ce4a9f5b93de62d326b15818f206f6d01a10\$lut for cells of type $lut.
Using template $paramod$8b377894d2392630856411bd52cc60a5ccff1402\$lut for cells of type $lut.
Using template $paramod$75f41d511cee275ba588b32a1222c8112565620e\$lut for cells of type $lut.
Using template $paramod$62232b1e4a05254ffc857c55b15929bd0afe0232\$lut for cells of type $lut.
Using template $paramod$27eb4048498cca65fd276f1c66ebc8e3185fe07f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11110100111111110000000011111111 for cells of type $lut.
Using template $paramod$62b30782100725d2acbbc4e34d98da747d1be0d3\$lut for cells of type $lut.
Using template $paramod$1ec3ea6cf6cf9789073232db5946533dd68f259d\$lut for cells of type $lut.
Using template $paramod$548e11d735ef739282597bbd55ebed64abf6ec03\$lut for cells of type $lut.
Using template $paramod$5fba6fa4affd3d8cb90b92595f737467c857f3c8\$lut for cells of type $lut.
Using template $paramod$00f3136a596aae886cbfbe06e1adc844becb6298\$lut for cells of type $lut.
Using template $paramod$4eb43a08f8c584aa861638d180e69f2bff03c99e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11101111111111110000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod$2e7ac2446cd2baeeb88d522e7b4932b73f83b37d\$lut for cells of type $lut.
Using template $paramod$5cc81f31da0e55ef506989f170eb86fdfb748d0e\$lut for cells of type $lut.
Using template $paramod$b72feb8bd703807a65471a46b1720c2c5dd7884d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10000000000000000000000000000000 for cells of type $lut.
Using template $paramod$acb824f3cdd210b2df2861df086c73037643c2ea\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11110000111111100000000000000000 for cells of type $lut.
Using template $paramod$51dab919376452e62e81f3b5d8cd53f26c6b3638\$lut for cells of type $lut.
Using template $paramod$ee8d10cfd88b188abfae9cf25e99e0711ba95cad\$lut for cells of type $lut.
Using template $paramod$fe1b3f5be69194b25d5067e030169bff42d83227\$lut for cells of type $lut.
Using template $paramod$ebb51387a74d395313452c1a6e40fa5da082ae27\$lut for cells of type $lut.
Using template $paramod$c95137fc337b4cff1d0500c5cc504d9228de6cd0\$lut for cells of type $lut.
Using template $paramod$01e48a99de9f1eb004005419da4d6322af31b569\$lut for cells of type $lut.
Using template $paramod$0dd2b923f06f04136ebaa14c5b7c5ec33d3dd531\$lut for cells of type $lut.
Using template $paramod$5f00fca796915559948c003bb13be3c9baf7d610\$lut for cells of type $lut.
Using template $paramod$13df7540c81efc97fa2c3f23e3409b75b4f0aed1\$lut for cells of type $lut.
Using template $paramod$e73a18c1046e3265cb2db8384164a7e55300f9c3\$lut for cells of type $lut.
Using template $paramod$16aa8d7302aabec41cafbfc46337571f59f740d4\$lut for cells of type $lut.
Using template $paramod$6386cefbbfb563112c7c4006d394848493c18059\$lut for cells of type $lut.
Using template $paramod$2411ace57acb8f148972c889f935306dd0f9627b\$lut for cells of type $lut.
Using template $paramod$45940501726cd68eb6aec615232840af326987cf\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11100011111111111111111111111111 for cells of type $lut.
Using template $paramod$7ff863e43feeab9623427ee4b0ca9a85f2c4bce1\$lut for cells of type $lut.
Using template $paramod$e5b9f15cd83e3958a826cfe532f07c2f2a78d3a2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101001 for cells of type $lut.
Using template $paramod$33a8b4c8a84ca536dbdd4fea6c96842757b1a355\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010110 for cells of type $lut.
Using template $paramod$4012d88cbfb7754769059744ee0e0f0961e3bba5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111000100000000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod$2a12d5fd8624c5571fc421eb542c4b89313ffeb5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001011000000000 for cells of type $lut.
Using template $paramod$174989fc5f89a3d24ee53611216dd5c55440dbd2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod$5547587bde2f1ca8d884d89fe5b90567ab8bb30e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=65296 for cells of type $lut.
Using template $paramod$8246f638b878bcec81032585a6efc209e96e7be4\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~2659 debug messages>

6.24. Executing DFFINIT pass (set INIT param on FF cells).
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5026.INIT (port=Q, net=\in_q [1]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5030.INIT (port=Q, net=\pe_valid) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5022.INIT (port=Q, net=\in_r [0]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$5008.INIT (port=Q, net=\count3 [0]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4995.INIT (port=Q, net=\count1 [0]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$5002.INIT (port=Q, net=\count1 [7]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5013.INIT (port=Q, net=\ctr [0]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5015.INIT (port=Q, net=\ctr [2]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5031.INIT (port=Q, net=\start_traceback) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4951.INIT (port=Q, net=\Q_aligned [27]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4940.INIT (port=Q, net=\Q_aligned [9]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5024.INIT (port=Q, net=\in_r [2]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4949.INIT (port=Q, net=\Q_aligned [0]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4942.INIT (port=Q, net=\Q_aligned [7]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4947.INIT (port=Q, net=\Q_aligned [2]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4935.INIT (port=Q, net=\Q_aligned [14]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4948.INIT (port=Q, net=\Q_aligned [1]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4946.INIT (port=Q, net=\Q_aligned [3]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5018.INIT (port=Q, net=\ctr [5]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4945.INIT (port=Q, net=\Q_aligned [4]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4943.INIT (port=Q, net=\Q_aligned [6]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4936.INIT (port=Q, net=\Q_aligned [13]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4937.INIT (port=Q, net=\Q_aligned [12]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5029.INIT (port=Q, net=\en_q) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5028.INIT (port=Q, net=\en_r) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4938.INIT (port=Q, net=\Q_aligned [11]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5021.INIT (port=Q, net=\stop_traceback) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4956.INIT (port=Q, net=\Q_aligned [22]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4952.INIT (port=Q, net=\Q_aligned [26]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4953.INIT (port=Q, net=\Q_aligned [25]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4959.INIT (port=Q, net=\Q_aligned [19]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$5007.INIT (port=Q, net=\count2 [4]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4957.INIT (port=Q, net=\Q_aligned [21]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4941.INIT (port=Q, net=\Q_aligned [8]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4960.INIT (port=Q, net=\Q_aligned [18]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4958.INIT (port=Q, net=\Q_aligned [20]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4962.INIT (port=Q, net=\Q_aligned [16]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4963.INIT (port=Q, net=\Q_aligned [15]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4954.INIT (port=Q, net=\Q_aligned [24]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4955.INIT (port=Q, net=\Q_aligned [23]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4982.INIT (port=Q, net=\R_aligned [26]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4983.INIT (port=Q, net=\R_aligned [25]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4984.INIT (port=Q, net=\R_aligned [24]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4986.INIT (port=Q, net=\R_aligned [22]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4988.INIT (port=Q, net=\R_aligned [20]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4989.INIT (port=Q, net=\R_aligned [19]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4990.INIT (port=Q, net=\R_aligned [18]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4991.INIT (port=Q, net=\R_aligned [17]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5023.INIT (port=Q, net=\in_r [1]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4964.INIT (port=Q, net=\Q_aligned [29]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4965.INIT (port=Q, net=\R_aligned [14]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4966.INIT (port=Q, net=\R_aligned [13]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4967.INIT (port=Q, net=\R_aligned [12]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4968.INIT (port=Q, net=\R_aligned [11]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4969.INIT (port=Q, net=\R_aligned [10]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4970.INIT (port=Q, net=\R_aligned [9]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4971.INIT (port=Q, net=\R_aligned [8]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4972.INIT (port=Q, net=\R_aligned [7]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4973.INIT (port=Q, net=\R_aligned [6]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4974.INIT (port=Q, net=\R_aligned [5]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4976.INIT (port=Q, net=\R_aligned [3]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4977.INIT (port=Q, net=\R_aligned [2]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4978.INIT (port=Q, net=\R_aligned [1]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5019.INIT (port=Q, net=\ctr [6]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5014.INIT (port=Q, net=\ctr [1]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5020.INIT (port=Q, net=\ctr [7]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5016.INIT (port=Q, net=\ctr [3]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5017.INIT (port=Q, net=\ctr [4]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$5009.INIT (port=Q, net=\count3 [1]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$5003.INIT (port=Q, net=\count2 [0]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$5004.INIT (port=Q, net=\count2 [1]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$5005.INIT (port=Q, net=\count2 [2]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$5006.INIT (port=Q, net=\count2 [3]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4996.INIT (port=Q, net=\count1 [1]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4997.INIT (port=Q, net=\count1 [2]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4998.INIT (port=Q, net=\count1 [3]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4999.INIT (port=Q, net=\count1 [4]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$5000.INIT (port=Q, net=\count1 [5]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$5001.INIT (port=Q, net=\count1 [6]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5025.INIT (port=Q, net=\in_q [0]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$5011.INIT (port=Q, net=\count3 [3]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$5010.INIT (port=Q, net=\count3 [2]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$5012.INIT (port=Q, net=\count3 [4]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4992.INIT (port=Q, net=\R_aligned [16]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:420:simplemap_dff$5027.INIT (port=Q, net=\in_q [2]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4950.INIT (port=Q, net=\Q_aligned [28]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4961.INIT (port=Q, net=\Q_aligned [17]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4979.INIT (port=Q, net=\R_aligned [0]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4980.INIT (port=Q, net=\R_aligned [28]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4981.INIT (port=Q, net=\R_aligned [27]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4985.INIT (port=Q, net=\R_aligned [23]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4987.INIT (port=Q, net=\R_aligned [21]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4993.INIT (port=Q, net=\R_aligned [15]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4994.INIT (port=Q, net=\R_aligned [29]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4944.INIT (port=Q, net=\Q_aligned [5]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4939.INIT (port=Q, net=\Q_aligned [10]) to 1'0.
Setting bsw_acc.$auto$simplemap.cc:442:simplemap_dffe$4975.INIT (port=Q, net=\R_aligned [4]) to 1'0.
Removing init attribute from wire bsw_acc.count1.
Removing init attribute from wire bsw_acc.count2.
Removing init attribute from wire bsw_acc.count3.
Setting pe_unit.$auto$simplemap.cc:420:simplemap_dff$5047.INIT (port=Q, net=\out_prev [7]) to 1'0.
Setting pe_unit.$auto$simplemap.cc:420:simplemap_dff$5032.INIT (port=Q, net=\out_current [0]) to 1'0.
Setting pe_unit.$auto$simplemap.cc:420:simplemap_dff$5033.INIT (port=Q, net=\out_current [1]) to 1'0.
Setting pe_unit.$auto$simplemap.cc:420:simplemap_dff$5034.INIT (port=Q, net=\out_current [2]) to 1'0.
Setting pe_unit.$auto$simplemap.cc:420:simplemap_dff$5041.INIT (port=Q, net=\out_prev [1]) to 1'0.
Setting pe_unit.$auto$simplemap.cc:420:simplemap_dff$5035.INIT (port=Q, net=\out_current [3]) to 1'0.
Setting pe_unit.$auto$simplemap.cc:420:simplemap_dff$5046.INIT (port=Q, net=\out_prev [6]) to 1'0.
Setting pe_unit.$auto$simplemap.cc:420:simplemap_dff$5045.INIT (port=Q, net=\out_prev [5]) to 1'0.
Setting pe_unit.$auto$simplemap.cc:420:simplemap_dff$5038.INIT (port=Q, net=\out_current [6]) to 1'0.
Setting pe_unit.$auto$simplemap.cc:420:simplemap_dff$5039.INIT (port=Q, net=\out_current [7]) to 1'0.
Setting pe_unit.$auto$simplemap.cc:420:simplemap_dff$5036.INIT (port=Q, net=\out_current [4]) to 1'0.
Setting pe_unit.$auto$simplemap.cc:420:simplemap_dff$5042.INIT (port=Q, net=\out_prev [2]) to 1'0.
Setting pe_unit.$auto$simplemap.cc:420:simplemap_dff$5037.INIT (port=Q, net=\out_current [5]) to 1'0.
Setting pe_unit.$auto$simplemap.cc:420:simplemap_dff$5043.INIT (port=Q, net=\out_prev [3]) to 1'0.
Setting pe_unit.$auto$simplemap.cc:420:simplemap_dff$5044.INIT (port=Q, net=\out_prev [4]) to 1'0.
Setting pe_unit.$auto$simplemap.cc:420:simplemap_dff$5040.INIT (port=Q, net=\out_prev [0]) to 1'0.
Setting shift_reg.$auto$simplemap.cc:442:simplemap_dffe$5055.INIT (port=Q, net=\out [7]) to 1'0.
Setting shift_reg.$auto$simplemap.cc:442:simplemap_dffe$5051.INIT (port=Q, net=\out [3]) to 1'0.
Setting shift_reg.$auto$simplemap.cc:442:simplemap_dffe$5054.INIT (port=Q, net=\out [6]) to 1'0.
Setting shift_reg.$auto$simplemap.cc:442:simplemap_dffe$5049.INIT (port=Q, net=\out [1]) to 1'0.
Setting shift_reg.$auto$simplemap.cc:442:simplemap_dffe$5050.INIT (port=Q, net=\out [2]) to 1'0.
Setting shift_reg.$auto$simplemap.cc:442:simplemap_dffe$5057.INIT (port=Q, net=\out [9]) to 1'0.
Setting shift_reg.$auto$simplemap.cc:442:simplemap_dffe$5058.INIT (port=Q, net=\out [10]) to 1'0.
Setting shift_reg.$auto$simplemap.cc:442:simplemap_dffe$5059.INIT (port=Q, net=\out [11]) to 1'0.
Setting shift_reg.$auto$simplemap.cc:442:simplemap_dffe$5056.INIT (port=Q, net=\out [8]) to 1'0.
Setting shift_reg.$auto$simplemap.cc:442:simplemap_dffe$5052.INIT (port=Q, net=\out [4]) to 1'0.
Setting shift_reg.$auto$simplemap.cc:442:simplemap_dffe$5053.INIT (port=Q, net=\out [5]) to 1'0.
Setting shift_reg.$auto$simplemap.cc:442:simplemap_dffe$5048.INIT (port=Q, net=\out [0]) to 1'0.
Removing init attribute from wire shift_reg.out.
Setting traceback.$auto$simplemap.cc:420:simplemap_dff$5079.INIT (port=Q, net=\out_r [2]) to 1'0.
Setting traceback.$auto$simplemap.cc:420:simplemap_dff$5077.INIT (port=Q, net=\out_r [0]) to 1'0.
Setting traceback.$auto$simplemap.cc:420:simplemap_dff$5083.INIT (port=Q, net=\activated) to 1'0.
Setting traceback.$auto$simplemap.cc:442:simplemap_dffe$5075.INIT (port=Q, net=\r_ctr [2]) to 1'0.
Setting traceback.$auto$simplemap.cc:442:simplemap_dffe$5072.INIT (port=Q, net=\q_ctr [2]) to 1'0.
Setting traceback.$auto$simplemap.cc:442:simplemap_dffe$5073.INIT (port=Q, net=\r_ctr [0]) to 1'0.
Setting traceback.$auto$simplemap.cc:442:simplemap_dffe$5074.INIT (port=Q, net=\r_ctr [1]) to 1'0.
Setting traceback.$auto$simplemap.cc:442:simplemap_dffe$5070.INIT (port=Q, net=\q_ctr [0]) to 1'0.
Setting traceback.$auto$simplemap.cc:442:simplemap_dffe$5071.INIT (port=Q, net=\q_ctr [1]) to 1'0.
Setting traceback.$auto$simplemap.cc:420:simplemap_dff$5080.INIT (port=Q, net=\out_q [0]) to 1'0.
Setting traceback.$auto$simplemap.cc:420:simplemap_dff$5081.INIT (port=Q, net=\out_q [1]) to 1'0.
Setting traceback.$auto$simplemap.cc:442:simplemap_dffe$5066.INIT (port=Q, net=\addr [4]) to 1'0.
Setting traceback.$auto$simplemap.cc:420:simplemap_dff$5078.INIT (port=Q, net=\out_r [1]) to 1'0.
Setting traceback.$auto$simplemap.cc:420:simplemap_dff$5082.INIT (port=Q, net=\out_q [2]) to 1'0.
Setting traceback.$auto$simplemap.cc:442:simplemap_dffe$5065.INIT (port=Q, net=\addr [3]) to 1'0.
Setting traceback.$auto$simplemap.cc:420:simplemap_dff$5076.INIT (port=Q, net=\finish) to 1'0.
Setting traceback.$auto$simplemap.cc:442:simplemap_dffe$5060.INIT (port=Q, net=\pe_id [0]) to 1'0.
Setting traceback.$auto$simplemap.cc:442:simplemap_dffe$5061.INIT (port=Q, net=\pe_id [1]) to 1'0.
Setting traceback.$auto$simplemap.cc:442:simplemap_dffe$5064.INIT (port=Q, net=\addr [2]) to 1'0.
Setting traceback.$auto$simplemap.cc:442:simplemap_dffe$5063.INIT (port=Q, net=\addr [1]) to 1'0.
Setting traceback.$auto$simplemap.cc:442:simplemap_dffe$5067.INIT (port=Q, net=\addr [5]) to 1'0.
Setting traceback.$auto$simplemap.cc:442:simplemap_dffe$5068.INIT (port=Q, net=\addr [6]) to 1'0.
Setting traceback.$auto$simplemap.cc:442:simplemap_dffe$5062.INIT (port=Q, net=\addr [0]) to 1'0.
Setting traceback.$auto$simplemap.cc:442:simplemap_dffe$5069.INIT (port=Q, net=\addr [7]) to 1'0.
Removed 0 unused cells and 2493 unused wires.

6.25. Executing HIERARCHY pass (managing design hierarchy).

6.25.1. Analyzing design hierarchy..
Top module:  \bsw_acc
Used module:     \pe_top
Used module:         \pe_unit
Used module:     \shift_reg
Used module:     \traceback

6.25.2. Analyzing design hierarchy..
Top module:  \bsw_acc
Used module:     \pe_top
Used module:         \pe_unit
Used module:     \shift_reg
Used module:     \traceback
Removed 0 unused modules.

6.26. Printing statistics.

=== bsw_acc ===

   Number of wires:                804
   Number of wire bits:           1325
   Number of public wires:          27
   Number of public wire bits:     209
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1174
     FDRE                           97
     LUT1                           40
     LUT2                          166
     LUT3                           25
     LUT4                            7
     LUT5                           72
     LUT6                          241
     MUXCY                         219
     MUXF7                          91
     MUXF8                          34
     RAM32X1D                       32
     XORCY                         146
     pe_top                          1
     shift_reg                       2
     traceback                       1

   Estimated number of LCs:        412

=== pe_top ===

   Number of wires:                 68
   Number of wire bits:            305
   Number of public wires:          32
   Number of public wire bits:     220
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                166
     LUT1                            8
     LUT2                            9
     LUT3                            9
     LUT4                           32
     LUT5                           32
     LUT6                           11
     MUXCY                          56
     MUXF7                           1
     XORCY                           4
     pe_unit                         4

   Estimated number of LCs:         84

=== pe_unit ===

   Number of wires:                250
   Number of wire bits:            396
   Number of public wires:          16
   Number of public wire bits:      85
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                339
     FDRE                           16
     LUT1                           39
     LUT2                           71
     LUT3                            7
     LUT4                            8
     LUT5                            7
     LUT6                           57
     MUXCY                          69
     MUXF7                          26
     MUXF8                           9
     XORCY                          30

   Estimated number of LCs:        123

=== shift_reg ===

   Number of wires:                  8
   Number of wire bits:             51
   Number of public wires:           7
   Number of public wire bits:      39
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 24
     FDRE                           12
     LUT3                           12

   Estimated number of LCs:         12

=== traceback ===

   Number of wires:                772
   Number of wire bits:           1022
   Number of public wires:          14
   Number of public wire bits:     106
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                932
     FDRE                           24
     LUT1                           18
     LUT2                          135
     LUT3                           16
     LUT4                            5
     LUT5                           22
     LUT6                          251
     MUXCY                         142
     MUXF7                         115
     MUXF8                          54
     XORCY                         150

   Estimated number of LCs:        351

=== design hierarchy ===

   bsw_acc                           1
     pe_top                          1
       pe_unit                       4
     shift_reg                       2
     traceback                       1

   Number of wires:               2660
   Number of wire bits:           4338
   Number of public wires:         151
   Number of public wire bits:     953
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3668
     FDRE                          209
     LUT1                          222
     LUT2                          594
     LUT3                          102
     LUT4                           76
     LUT5                          154
     LUT6                          731
     MUXCY                         693
     MUXF7                         311
     MUXF8                         124
     RAM32X1D                       32
     XORCY                         420

   Estimated number of LCs:       1305

6.27. Executing CHECK pass (checking for obvious problems).
checking module bsw_acc..
checking module pe_top..
checking module pe_unit..
checking module shift_reg..
checking module traceback..
found and reported 0 problems.

7. Executing Verilog backend.
Dumping module `\bsw_acc'.
Dumping module `\pe_top'.
Dumping module `\pe_unit'.
Dumping module `\shift_reg'.
Dumping module `\traceback'.

End of script. Logfile hash: ca293defb8
CPU: user 6.21s system 0.31s, MEM: 182.30 MB total, 176.64 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 20% 22x read_verilog (1 sec), 15% 2x write_verilog (0 sec), ...
